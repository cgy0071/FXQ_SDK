<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\gankerpilot.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\gankerpilot.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050169: Last Updated: Fri Mar 31 22:16:28 2023
<BR><P>
<H3>Maximum Stack Usage =        368 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; Mag_Calibartion_LS &rArr; LS_Calculate &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemManage_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DebugMon_Handler</a><BR>
 <LI><a href="#[b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">PendSV_Handler</a><BR>
 <LI><a href="#[29]">AES256_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">AES256_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[25]">ADC14_IRQHandler</a> from wp_adc.o(i.ADC14_IRQHandler) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[29]">AES256_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[13]">COMP_E0_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[14]">COMP_E1_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[e]">CS_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[2b]">DMA_ERR_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[2f]">DMA_INT0_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[2e]">DMA_INT1_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[2d]">DMA_INT2_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[2c]">DMA_INT3_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[1d]">EUSCIA0_IRQHandler</a> from usart.o(i.EUSCIA0_IRQHandler) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[1e]">EUSCIA1_IRQHandler</a> from usart.o(i.EUSCIA1_IRQHandler) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[1f]">EUSCIA2_IRQHandler</a> from usart.o(i.EUSCIA2_IRQHandler) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[20]">EUSCIA3_IRQHandler</a> from usart.o(i.EUSCIA3_IRQHandler) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[21]">EUSCIB0_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[22]">EUSCIB1_IRQHandler</a> from myiic.o(i.EUSCIB1_IRQHandler) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[23]">EUSCIB2_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[24]">EUSCIB3_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[12]">FLCTL_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[11]">FPU_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[f]">PCM_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[30]">PORT1_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[31]">PORT2_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[32]">PORT3_IRQHandler</a> from gy53l1x.o(i.PORT3_IRQHandler) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[33]">PORT4_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[34]">PORT5_IRQHandler</a> from gy53l1x.o(i.PORT5_IRQHandler) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[35]">PORT6_IRQHandler</a> from ppm.o(i.PORT6_IRQHandler) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[d]">PSS_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[2a]">RTC_C_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from time.o(i.SysTick_Handler) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[36]">SystemInit</a> from system_msp432p401r.o(i.SystemInit) referenced from startup_msp432p401r_uvision.o(.text)
 <LI><a href="#[26]">T32_INT1_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[27]">T32_INT2_IRQHandler</a> from license.o(i.T32_INT2_IRQHandler) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[28]">T32_INTC_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[15]">TA0_0_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[16]">TA0_N_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[17]">TA1_0_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[18]">TA1_N_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[19]">TA2_0_IRQHandler</a> from time_cnt.o(i.TA2_0_IRQHandler) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[1a]">TA2_N_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[1b]">TA3_0_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[1c]">TA3_N_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[10]">WDT_A_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[38]">__main</a> from __main.o(!!!main) referenced from startup_msp432p401r_uvision.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[38]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[39]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[3b]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1eb]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1ec]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1ed]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1ee]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1ef]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[41]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[3c]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[1f0]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1f1]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1f2]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1f3]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1f4]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1f5]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1f6]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1f7]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1f8]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1f9]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1fa]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1fb]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1fc]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1fd]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1fe]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1ff]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[200]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[201]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[202]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[203]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[46]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[204]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[205]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[206]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[207]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[208]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[209]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[3a]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[20a]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[3e]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[40]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[20b]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[42]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Mag_Calibartion_LS &rArr; LS_Calculate &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[20c]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[52]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[45]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[20d]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[47]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>AES256_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES256_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES256_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>COMP_E0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>COMP_E1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>CS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA_INT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA_INT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA_INT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA_INT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EUSCIB0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EUSCIB2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EUSCIB3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>FLCTL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>PCM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>PORT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>PORT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>PORT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PSS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>RTC_C_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>T32_INT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>T32_INTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TA0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TA0_N_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TA1_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TA1_N_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TA2_N_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TA3_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TA3_N_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>WDT_A_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[14e]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Control
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPM_IRQHandler
</UL>

<P><STRONG><a name="[49]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[20e]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DT_Reset
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[20f]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[210]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[211]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_clear_display
</UL>

<P><STRONG><a name="[4b]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[212]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LS_Init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Calibration_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibrate_accel
</UL>

<P><STRONG><a name="[213]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[214]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[215]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[216]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[217]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[4f]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[4e]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[218]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[219]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[21a]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[21b]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[44]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[48]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[21c]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[21d]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[21e]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[25]"></a>ADC14_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, wp_adc.o(i.ADC14_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC14_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[f9]"></a>ADC_Init</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, wp_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
</UL>

<P><STRONG><a name="[102]"></a>ADRC_Init</STRONG> (Thumb, 240 bytes, Stack size 0 bytes, adrc.o(i.ADRC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
</UL>

<P><STRONG><a name="[53]"></a>AT24CXX_Check</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, license.o(i.AT24CXX_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = AT24CXX_Check &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; SOFT_IIC_Read_Byte &rArr; SOFT_IIC_NAck &rArr; SOFT_IIC_Delay &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setOutputHighOnPin
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_getInputPinValue
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Init
</UL>

<P><STRONG><a name="[59]"></a>AT24CXX_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, license.o(i.AT24CXX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = AT24CXX_Init &rArr; AT24CXX_Check &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; SOFT_IIC_Read_Byte &rArr; SOFT_IIC_NAck &rArr; SOFT_IIC_Delay &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[56]"></a>AT24CXX_Read</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, license.o(i.AT24CXX_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; SOFT_IIC_Read_Byte &rArr; SOFT_IIC_NAck &rArr; SOFT_IIC_Delay &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read_Float
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Check
</UL>

<P><STRONG><a name="[57]"></a>AT24CXX_ReadOneByte</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, license.o(i.AT24CXX_ReadOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = AT24CXX_ReadOneByte &rArr; SOFT_IIC_Read_Byte &rArr; SOFT_IIC_NAck &rArr; SOFT_IIC_Delay &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Wait_Ack
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Stop
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Start
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Send_Byte
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Check
</UL>

<P><STRONG><a name="[61]"></a>AT24CXX_Read_Float</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, license.o(i.AT24CXX_Read_Float))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = AT24CXX_Read_Float &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; SOFT_IIC_Read_Byte &rArr; SOFT_IIC_NAck &rArr; SOFT_IIC_Delay &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read_N_Data
</UL>

<P><STRONG><a name="[62]"></a>AT24CXX_Write</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, license.o(i.AT24CXX_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = AT24CXX_Write &rArr; AT24CXX_WriteOneByte &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume_Factory_Setting
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write_Data
</UL>

<P><STRONG><a name="[58]"></a>AT24CXX_WriteOneByte</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, license.o(i.AT24CXX_WriteOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = AT24CXX_WriteOneByte &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Wait_Ack
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Stop
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Start
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Check
</UL>

<P><STRONG><a name="[63]"></a>AT24CXX_Write_Data</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, license.o(i.AT24CXX_Write_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = AT24CXX_Write_Data &rArr; AT24CXX_Write &rArr; AT24CXX_WriteOneByte &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write_N_Data
</UL>

<P><STRONG><a name="[64]"></a>Accel_Calibartion</STRONG> (Thumb, 520 bytes, Stack size 40 bytes, calibration.o(i.Accel_Calibartion))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = Accel_Calibartion &rArr; Calibrate_accel &rArr; Calibrate_Update_Matrices
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashParameter_Three
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibrate_accel
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bling_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69]"></a>Accel_Calibration_Check</STRONG> (Thumb, 1188 bytes, Stack size 32 bytes, calibration.o(i.Accel_Calibration_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Accel_Calibration_Check &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_RC_Calibartion
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Mag_Calibartion
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bling_Set
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_All_Calibartion
</UL>

<P><STRONG><a name="[6f]"></a>Angle_Control_Target</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, wp_ctrl.o(i.Angle_Control_Target))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Angle_Control_Target &rArr; PID_Control_Yaw &rArr; Test_Period
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Control_Yaw
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control
</UL>

<P><STRONG><a name="[72]"></a>Attitude_Control</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wp_ctrl.o(i.Attitude_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Attitude_Control &rArr; Gyro_Control &rArr; PID_Control_Div_LPF_For_Gyro &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Control
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_Control_Target
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Total_Control
</UL>

<P><STRONG><a name="[74]"></a>Auto_Flight_Ctrl</STRONG> (Thumb, 398 bytes, Stack size 8 bytes, developer_mode.o(i.Auto_Flight_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Auto_Flight_Ctrl &rArr; NCQ_SDK_Run &rArr; move_with_z_target &rArr; OpticalFlow_Control_Pure &rArr; OpticalFlow_Vel_Control &rArr; accel_to_lean_angles &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flight_Alt_Hold_Control
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color_Block_Control_Pliot
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Top_APrilTag_Control_Pliot
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Track_Control_Pliot
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Front_AprilTag_Control_Pliot
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Control
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCQ_SDK_Run
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Leading_Control
</UL>

<P><STRONG><a name="[fa]"></a>Bling_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bling.o(i.Bling_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bling_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
</UL>

<P><STRONG><a name="[7d]"></a>Bling_Process</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, bling.o(i.Bling_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bling_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bling_Working
</UL>

<P><STRONG><a name="[68]"></a>Bling_Set</STRONG> (Thumb, 30 bytes, Stack size 20 bytes, bling.o(i.Bling_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Bling_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Calibration_Check
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Horizontal_Calibration_Check
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Calibration_Check
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_Calibration_Check
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Calibration_Check
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quad_Start_Bling
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Calibartion_LS
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Calibartion
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Control
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pilot_Status_Tick
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_Output
</UL>

<P><STRONG><a name="[7c]"></a>Bling_Working</STRONG> (Thumb, 512 bytes, Stack size 8 bytes, bling.o(i.Bling_Working))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bling_Working &rArr; Bling_Process
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bling_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_400hz_Thread
</UL>

<P><STRONG><a name="[7e]"></a>Butterworth_Parameter_Init</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, filter.o(i.Butterworth_Parameter_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Butterworth_Parameter_Init &rArr; Set_Cutoff_Frequency &rArr; __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Cutoff_Frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
</UL>

<P><STRONG><a name="[1a3]"></a>CS_clearInterruptFlag</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, cs.o(i.CS_clearInterruptFlag))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CSComputeCLKFrequency
</UL>

<P><STRONG><a name="[80]"></a>CS_getACLK</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, cs.o(i.CS_getACLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CS_getACLK &rArr; _CSComputeCLKFrequency &rArr; CS_getDCOFrequency &rArr; SysCtl_getTLVInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CSComputeCLKFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[82]"></a>CS_getDCOFrequency</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, cs.o(i.CS_getDCOFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CS_getDCOFrequency &rArr; SysCtl_getTLVInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtl_getTLVInfo
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CSGetDOCFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CSComputeCLKFrequency
</UL>

<P><STRONG><a name="[85]"></a>CS_getMCLK</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, cs.o(i.CS_getMCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CS_getMCLK &rArr; _CSComputeCLKFrequency &rArr; CS_getDCOFrequency &rArr; SysCtl_getTLVInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CSComputeCLKFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[86]"></a>CS_getSMCLK</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, cs.o(i.CS_getSMCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CS_getSMCLK &rArr; _CSComputeCLKFrequency &rArr; CS_getDCOFrequency &rArr; SysCtl_getTLVInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CSComputeCLKFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[1d3]"></a>CS_setExternalClockSourceFrequency</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cs.o(i.CS_setExternalClockSourceFrequency))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[87]"></a>CS_startHFXT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cs.o(i.CS_startHFXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CS_startHFXT &rArr; CS_startHFXTWithTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_startHFXTWithTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[88]"></a>CS_startHFXTWithTimeout</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, cs.o(i.CS_startHFXTWithTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CS_startHFXTWithTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtl_getNMISourceStatus
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtl_enableNMISource
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtl_disableNMISource
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CSGetHFXTFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_startHFXT
</UL>

<P><STRONG><a name="[90]"></a>Calibrate_Find_Delta</STRONG> (Thumb, 350 bytes, Stack size 16 bytes, calibration.o(i.Calibrate_Find_Delta))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Calibrate_Find_Delta
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibrate_accel
</UL>

<P><STRONG><a name="[8e]"></a>Calibrate_Reset_Matrices</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, calibration.o(i.Calibrate_Reset_Matrices))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Calibrate_Reset_Matrices
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibrate_accel
</UL>

<P><STRONG><a name="[8f]"></a>Calibrate_Update_Matrices</STRONG> (Thumb, 246 bytes, Stack size 44 bytes, calibration.o(i.Calibrate_Update_Matrices))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Calibrate_Update_Matrices
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibrate_accel
</UL>

<P><STRONG><a name="[65]"></a>Calibrate_accel</STRONG> (Thumb, 660 bytes, Stack size 264 bytes, calibration.o(i.Calibrate_accel))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = Calibrate_accel &rArr; Calibrate_Update_Matrices
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibrate_Update_Matrices
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibrate_Reset_Matrices
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibrate_Find_Delta
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Calibartion
</UL>

<P><STRONG><a name="[91]"></a>Check_All_Calibartion</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, calibration.o(i.Check_All_Calibartion))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = Check_All_Calibartion &rArr; Horizontal_Calibration_Check &rArr; Parameter_Init &rArr; ReadFlashParameterThree &rArr; EEPROM_Read_N_Data &rArr; AT24CXX_Read_Float &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; SOFT_IIC_Read_Byte &rArr; SOFT_IIC_NAck &rArr; SOFT_IIC_Delay &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Calibration_Check
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Horizontal_Calibration_Check
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_Calibration_Check
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Calibration_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_400hz_Thread
</UL>

<P><STRONG><a name="[167]"></a>Check_Calibration_Flag</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, calibration.o(i.Check_Calibration_Flag))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Control
</UL>

<P><STRONG><a name="[12c]"></a>Check_Plane_Sampling_Okay</STRONG> (Thumb, 452 bytes, Stack size 8 bytes, calibration.o(i.Check_Plane_Sampling_Okay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Check_Plane_Sampling_Okay
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Calibartion_LS
</UL>

<P><STRONG><a name="[76]"></a>Color_Block_Control_Pliot</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, opticalflow_control.o(i.Color_Block_Control_Pliot))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Color_Block_Control_Pliot &rArr; OpticalFlow_Control_Pure &rArr; OpticalFlow_Vel_Control &rArr; accel_to_lean_angles &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Control_Pure
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Control_SDK_Err_LPF
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Vel_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_black
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Flight_Ctrl
</UL>

<P><STRONG><a name="[181]"></a>Compass_Fault_Check</STRONG> (Thumb, 196 bytes, Stack size 0 bytes, compass.o(i.Compass_Fault_Check))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Update
</UL>

<P><STRONG><a name="[98]"></a>Config_Init_Uart</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, opticalflow_lc306.o(i.Config_Init_Uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Config_Init_Uart &rArr; delay_ms &rArr; Delay_Ms &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorConfig_UartSend
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Init
</UL>

<P><STRONG><a name="[149]"></a>Control_Device_LPF</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, pid.o(i.Control_Device_LPF))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Control_SDK_Err_LPF
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Control_Div_LPF_For_Gyro
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Control_Div_LPF
</UL>

<P><STRONG><a name="[9a]"></a>Control_Output</STRONG> (Thumb, 1402 bytes, Stack size 24 bytes, wp_ctrl.o(i.Control_Output))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Control_Output &rArr; PWM_Output &rArr; EPWM_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Output
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bling_Set
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Throttle_Control_Reset
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Off_Reset
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_SINS_Reset
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Ctrl_Reset
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;landon_earth_check
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Value_Limit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Throttle_Angle_Compensate
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GankerPilot_Control
</UL>

<P><STRONG><a name="[a3]"></a>Controler_Mode_Select</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, wp_ctrl.o(i.Controler_Mode_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Controler_Mode_Select &rArr; Take_Off_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Off_Reset
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;land_reset
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thr_Push_Over_Deadband
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GankerPilot_Control
</UL>

<P><STRONG><a name="[a6]"></a>Copyright_Show</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, license.o(i.Copyright_Show))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Copyright_Show &rArr; write_6_8_number &rArr; LCD_P6x8Str &rArr; LCD_Set_Pos &rArr; LCD_WrCmd &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_6_8_number
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear_L
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_P6x8Str
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
</UL>

<P><STRONG><a name="[aa]"></a>Delay_Ms</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, time.o(i.Delay_Ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay_Ms &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init_Fast
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[ac]"></a>Double_ReadI2C</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, myiic.o(i.Double_ReadI2C))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Double_ReadI2C &rArr; nc_iic_read_len &rArr; send_ch &rArr; WaitAck &rArr; GPIO_getInputPinValue
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nc_iic_read_len
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Calibration
</UL>

<P><STRONG><a name="[ae]"></a>Draw_Logo1</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, oled.o(i.Draw_Logo1))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Draw_Logo1 &rArr; LCD_Set_Pos &rArr; LCD_WrCmd &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WrDat
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Pos
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[b1]"></a>EEPROM_Read_N_Data</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, license.o(i.EEPROM_Read_N_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = EEPROM_Read_N_Data &rArr; AT24CXX_Read_Float &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; SOFT_IIC_Read_Byte &rArr; SOFT_IIC_NAck &rArr; SOFT_IIC_Delay &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read_Float
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashParameterTwo
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashParameterThree
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashParameterOne
</UL>

<P><STRONG><a name="[b2]"></a>EEPROM_Write_N_Data</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, license.o(i.EEPROM_Write_N_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = EEPROM_Write_N_Data &rArr; AT24CXX_Write_Data &rArr; AT24CXX_Write &rArr; AT24CXX_WriteOneByte &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashParameter_Two
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashParameter_Three
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashParameter
</UL>

<P><STRONG><a name="[118]"></a>EPWM_GPIO_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wp_pwm.o(i.EPWM_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EPWM_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_EPWM
</UL>

<P><STRONG><a name="[119]"></a>EPWM_Output</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, wp_pwm.o(i.EPWM_Output))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EPWM_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Output
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_EPWM
</UL>

<P><STRONG><a name="[b3]"></a>ESC_Calibration</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, calibration.o(i.ESC_Calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ESC_Calibration &rArr; PWM_Output &rArr; EPWM_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_HardWave_Init
</UL>

<P><STRONG><a name="[94]"></a>ESC_Calibration_Check</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, calibration.o(i.ESC_Calibration_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = ESC_Calibration_Check &rArr; WriteFlashParameter &rArr; EEPROM_Write_N_Data &rArr; AT24CXX_Write_Data &rArr; AT24CXX_Write &rArr; AT24CXX_WriteOneByte &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashParameter
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bling_Set
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_All_Calibartion
</UL>

<P><STRONG><a name="[b5]"></a>ESC_HardWave_Init</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, license.o(i.ESC_HardWave_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = ESC_HardWave_Init &rArr; WriteFlashParameter &rArr; EEPROM_Write_N_Data &rArr; AT24CXX_Write_Data &rArr; AT24CXX_Write &rArr; AT24CXX_WriteOneByte &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashParameter
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_Calibration
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init_Fast
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_6_8_number
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear_L
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_P8x16Str
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_P6x8Str
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPM_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PWM
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer32_init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[1d]"></a>EUSCIA0_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usart.o(i.EUSCIA0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EUSCIA0_IRQHandler &rArr; RingBuf_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EUSCIA1_IRQHandler</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usart.o(i.EUSCIA1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EUSCIA1_IRQHandler &rArr; RingBuf_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EUSCIA2_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usart.o(i.EUSCIA2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = EUSCIA2_IRQHandler &rArr; NCLink_Data_Prase_Prepare &rArr; NCLink_Data_Prase_Process &rArr; Other_Parameter_Default &rArr; WriteFlashParameter &rArr; EEPROM_Write_N_Data &rArr; AT24CXX_Write_Data &rArr; AT24CXX_Write &rArr; AT24CXX_WriteOneByte &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Data_Prase_Prepare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EUSCIA3_IRQHandler</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usart.o(i.EUSCIA3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EUSCIA3_IRQHandler &rArr; RingBuf_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EUSCIB1_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, myiic.o(i.EUSCIB1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EUSCIB1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[be]"></a>Euler_Angle_Init</STRONG> (Thumb, 832 bytes, Stack size 48 bytes, sensor.o(i.Euler_Angle_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Euler_Angle_Init &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Read_Data
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IST8310_Read_Data
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_atan
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastAtan2
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invSqrt
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_Init
</UL>

<P><STRONG><a name="[c8]"></a>Euler_Angle_Init_Again</STRONG> (Thumb, 2428 bytes, Stack size 104 bytes, sensor.o(i.Euler_Angle_Init_Again))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Euler_Angle_Init_Again &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_atan
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastAtan2
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invSqrt
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Calibration_Check
</UL>

<P><STRONG><a name="[1d6]"></a>FPU_enableLazyStacking</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fpu.o(i.FPU_enableLazyStacking))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[1d5]"></a>FPU_enableModule</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fpu.o(i.FPU_enableModule))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[cc]"></a>FastAsin</STRONG> (Thumb, 282 bytes, Stack size 4 bytes, wp_math.o(i.FastAsin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FastAsin &rArr; FastSqrt &rArr; FastSqrtI
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastSqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Status_Feedback
</UL>

<P><STRONG><a name="[c7]"></a>FastAtan2</STRONG> (Thumb, 388 bytes, Stack size 0 bytes, wp_math.o(i.FastAtan2))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Angle_Init_Again
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Status_Feedback
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Observation_Angle_Calculate
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Angle_Init
</UL>

<P><STRONG><a name="[1be]"></a>FastCos</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, wp_math.o(i.FastCos))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuComputeRotationMatrix
</UL>

<P><STRONG><a name="[ce]"></a>FastPow</STRONG> (Thumb, 1158 bytes, Stack size 68 bytes, wp_math.o(i.FastPow))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = FastPow
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modf
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Baro_Offset
</UL>

<P><STRONG><a name="[1bd]"></a>FastSin</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, wp_math.o(i.FastSin))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuComputeRotationMatrix
</UL>

<P><STRONG><a name="[cd]"></a>FastSqrt</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, wp_math.o(i.FastSqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FastSqrt &rArr; FastSqrtI
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastSqrtI
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastAsin
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Status_Feedback
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Openmv_Data_Receive_Anl_2
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Openmv_Data_Receive_Anl_1
</UL>

<P><STRONG><a name="[d0]"></a>FastSqrtI</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, wp_math.o(i.FastSqrtI))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FastSqrtI
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastSqrt
</UL>

<P><STRONG><a name="[180]"></a>FastTan</STRONG> (Thumb, 356 bytes, Stack size 0 bytes, wp_math.o(i.FastTan))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Parameter_Sort
</UL>

<P><STRONG><a name="[77]"></a>Flight_Alt_Hold_Control</STRONG> (Thumb, 808 bytes, Stack size 24 bytes, control_althold.o(i.Flight_Alt_Hold_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Flight_Alt_Hold_Control &rArr; PID_Control_Div_LPF &rArr; Test_Period
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Control_Div_LPF
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Control
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Systime
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_black
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_with_z_target
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_with_xy_target
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCQ_SDK_Run
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;land_nogps_run
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Flight_Ctrl
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Total_Control
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Leading_Control
</UL>

<P><STRONG><a name="[7a]"></a>Front_AprilTag_Control_Pliot</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, opticalflow_control.o(i.Front_AprilTag_Control_Pliot))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Front_AprilTag_Control_Pliot &rArr; OpticalFlow_Control_Pure &rArr; OpticalFlow_Vel_Control &rArr; accel_to_lean_angles &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Control_Pure
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Control_SDK_Err_LPF
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Vel_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Flight_Ctrl
</UL>

<P><STRONG><a name="[121]"></a>GPIO_WriteBit</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, oled.o(i.GPIO_WriteBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init_Fast
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WrDat
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WrCmd
</UL>

<P><STRONG><a name="[d7]"></a>GPIO_clearInterruptFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.GPIO_clearInterruptFlag))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;US100_UP
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;US100_DN
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY53L1X_In2_UP
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY53L1X_In2_DN
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY53L1X_In1_UP
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY53L1X_In1_DN
</UL>

<P><STRONG><a name="[55]"></a>GPIO_getInputPinValue</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gpio.o(i.GPIO_getInputPinValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_getInputPinValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ch
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitAck
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Wait_Ack
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Read_Byte
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume_Factory_Setting
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Check
</UL>

<P><STRONG><a name="[d6]"></a>GPIO_interruptEdgeSelect</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gpio.o(i.GPIO_interruptEdgeSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_interruptEdgeSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPM_Init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;US100_UP
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;US100_DN
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY53L1X_In2_UP
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY53L1X_In2_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY53L1X_In2_DN
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY53L1X_In1_UP
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY53L1X_In1_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY53L1X_In1_DN
</UL>

<P><STRONG><a name="[169]"></a>GPIO_setAsInputPin</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gpio.o(i.GPIO_setAsInputPin))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IOIN
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_SDA_IN
</UL>

<P><STRONG><a name="[dc]"></a>GPIO_setAsInputPinWithPullDownResistor</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gpio.o(i.GPIO_setAsInputPinWithPullDownResistor))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;US100_UP
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY53L1X_In2_UP
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY53L1X_In1_UP
</UL>

<P><STRONG><a name="[d5]"></a>GPIO_setAsInputPinWithPullUpResistor</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gpio.o(i.GPIO_setAsInputPinWithPullUpResistor))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;US100_DN
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY53L1X_In2_DN
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY53L1X_In1_DN
</UL>

<P><STRONG><a name="[110]"></a>GPIO_setAsOutputPin</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gpio.o(i.GPIO_setAsOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IOOUT
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_I2C
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_SDA_OUT
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
</UL>

<P><STRONG><a name="[54]"></a>GPIO_setOutputHighOnPin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.GPIO_setOutputHighOnPin))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ch
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ch
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_I2C
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_stop
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_start
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitAck
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendACK
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;US100_Trigger_Conversion
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_NAck
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Ack
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Wait_Ack
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Stop
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Start
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Send_Byte
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Read_Byte
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Check
</UL>

<P><STRONG><a name="[10d]"></a>GPIO_setOutputLowOnPin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.GPIO_setOutputLowOnPin))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ch
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ch
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_stop
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_start
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitAck
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendACK
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;US100_Trigger_Conversion
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_NAck
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Ack
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Wait_Ack
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Stop
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Start
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Send_Byte
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Read_Byte
</UL>

<P><STRONG><a name="[193]"></a>GY53L1X_Data_Update</STRONG> (Thumb, 376 bytes, Stack size 0 bytes, gy53l1x.o(i.GY53L1X_Data_Update))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_400hz_Thread
</UL>

<P><STRONG><a name="[d4]"></a>GY53L1X_In1_DN</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gy53l1x.o(i.GY53L1X_In1_DN))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GY53L1X_In1_DN &rArr; GPIO_interruptEdgeSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setAsInputPinWithPullUpResistor
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_interruptEdgeSelect
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_clearInterruptFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY53L1X_In1_IRQHandler
</UL>

<P><STRONG><a name="[d8]"></a>GY53L1X_In1_IRQHandler</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, gy53l1x.o(i.GY53L1X_In1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GY53L1X_In1_IRQHandler &rArr; GY53L1X_In1_UP &rArr; GPIO_interruptEdgeSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer32_getValue
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY53L1X_In1_UP
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY53L1X_In1_DN
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT5_IRQHandler
</UL>

<P><STRONG><a name="[db]"></a>GY53L1X_In1_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, gy53l1x.o(i.GY53L1X_In1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GY53L1X_In1_Init &rArr; GPIO_interruptEdgeSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_interruptEdgeSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY53L1X_Init
</UL>

<P><STRONG><a name="[da]"></a>GY53L1X_In1_UP</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gy53l1x.o(i.GY53L1X_In1_UP))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GY53L1X_In1_UP &rArr; GPIO_interruptEdgeSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setAsInputPinWithPullDownResistor
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_interruptEdgeSelect
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_clearInterruptFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY53L1X_In1_IRQHandler
</UL>

<P><STRONG><a name="[dd]"></a>GY53L1X_In2_DN</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gy53l1x.o(i.GY53L1X_In2_DN))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GY53L1X_In2_DN &rArr; GPIO_interruptEdgeSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setAsInputPinWithPullUpResistor
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_interruptEdgeSelect
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_clearInterruptFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY53L1X_In2_IRQHandler
</UL>

<P><STRONG><a name="[de]"></a>GY53L1X_In2_IRQHandler</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, gy53l1x.o(i.GY53L1X_In2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GY53L1X_In2_IRQHandler &rArr; GY53L1X_In2_UP &rArr; GPIO_interruptEdgeSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer32_getValue
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY53L1X_In2_UP
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY53L1X_In2_DN
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Systime
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT3_IRQHandler
</UL>

<P><STRONG><a name="[e0]"></a>GY53L1X_In2_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, gy53l1x.o(i.GY53L1X_In2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GY53L1X_In2_Init &rArr; GPIO_interruptEdgeSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_interruptEdgeSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY53L1X_Init
</UL>

<P><STRONG><a name="[df]"></a>GY53L1X_In2_UP</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gy53l1x.o(i.GY53L1X_In2_UP))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GY53L1X_In2_UP &rArr; GPIO_interruptEdgeSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setAsInputPinWithPullDownResistor
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_interruptEdgeSelect
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_clearInterruptFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY53L1X_In2_IRQHandler
</UL>

<P><STRONG><a name="[e1]"></a>GY53L1X_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gy53l1x.o(i.GY53L1X_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GY53L1X_Init &rArr; GY53L1X_In2_Init &rArr; GPIO_interruptEdgeSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY53L1X_In2_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY53L1X_In1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
</UL>

<P><STRONG><a name="[e2]"></a>GankerPilot_Control</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, wp_ctrl.o(i.GankerPilot_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GankerPilot_Control &rArr; Total_Control &rArr; Main_Leading_Control &rArr; Auto_Flight_Ctrl &rArr; NCQ_SDK_Run &rArr; move_with_z_target &rArr; OpticalFlow_Control_Pure &rArr; OpticalFlow_Vel_Control &rArr; accel_to_lean_angles &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature_Ctrl
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Total_Control
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controler_Mode_Select
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_200hz_Thread
</UL>

<P><STRONG><a name="[e5]"></a>Get_Baro_Offset</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, sensor.o(i.Get_Baro_Offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Get_Baro_Offset &rArr; FastPow
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastPow
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Update
</UL>

<P><STRONG><a name="[195]"></a>Get_Battery_Voltage</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, wp_adc.o(i.Get_Battery_Voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_Battery_Voltage
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_400hz_Thread
</UL>

<P><STRONG><a name="[e7]"></a>Get_Status_Feedback</STRONG> (Thumb, 878 bytes, Stack size 8 bytes, sensor.o(i.Get_Status_Feedback))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Get_Status_Feedback &rArr; Madgwick_AHRS_Update_IMU &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Period
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strapdown_INS_High_Kalman
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SINS_Prepare
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastSqrt
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastAtan2
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastAsin
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuComputeRotationMatrix
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Update
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Observation_Angle_Calculate
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick_AHRS_Update_IMU
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_200hz_Thread
</UL>

<P><STRONG><a name="[d1]"></a>Get_Systime</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, license.o(i.Get_Systime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_Systime
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer32_getValue
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flight_Alt_Hold_Control
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY53L1X_In2_IRQHandler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Control
</UL>

<P><STRONG><a name="[183]"></a>GildeAverageValueFilter_MAG</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, filter.o(i.GildeAverageValueFilter_MAG))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Update
</UL>

<P><STRONG><a name="[ef]"></a>Gyro_Calibration_Check</STRONG> (Thumb, 416 bytes, Stack size 24 bytes, calibration.o(i.Gyro_Calibration_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Gyro_Calibration_Check &rArr; Euler_Angle_Init_Again &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashParameter_Three
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature_State_Check
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Angle_Init_Again
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bling_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Update
</UL>

<P><STRONG><a name="[73]"></a>Gyro_Control</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, wp_ctrl.o(i.Gyro_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Gyro_Control &rArr; PID_Control_Div_LPF_For_Gyro &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Control_Div_LPF_For_Gyro
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Control_Div_LPF
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yaw_Fault_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control
</UL>

<P><STRONG><a name="[f3]"></a>HardWave_Init</STRONG> (Thumb, 302 bytes, Stack size 8 bytes, system.o(i.HardWave_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = HardWave_Init &rArr; WP_Quad_Init &rArr; Quaternion_Init &rArr; Euler_Angle_Init &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Calibration_Trigger
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Other_Parameter_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Horizontal_Calibration_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quad_Start_Bling
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bling_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Paramter_Init_With_Flash
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_MPU6050
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CLS
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Butterworth_Parameter_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WP_Quad_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature_Ctrl_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Simulation_PWM_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_Init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY53L1X_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADRC_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPL06_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92]"></a>Horizontal_Calibration_Check</STRONG> (Thumb, 650 bytes, Stack size 40 bytes, calibration.o(i.Horizontal_Calibration_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = Horizontal_Calibration_Check &rArr; Parameter_Init &rArr; ReadFlashParameterThree &rArr; EEPROM_Read_N_Data &rArr; AT24CXX_Read_Float &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; SOFT_IIC_Read_Byte &rArr; SOFT_IIC_NAck &rArr; SOFT_IIC_Delay &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashParameter
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bling_Set
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_All_Calibartion
</UL>

<P><STRONG><a name="[ff]"></a>Horizontal_Calibration_Init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, calibration.o(i.Horizontal_Calibration_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Horizontal_Calibration_Init &rArr; ReadFlashParameterOne &rArr; EEPROM_Read_N_Data &rArr; AT24CXX_Read_Float &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; SOFT_IIC_Read_Byte &rArr; SOFT_IIC_NAck &rArr; SOFT_IIC_Delay &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashParameterOne
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
</UL>

<P><STRONG><a name="[5a]"></a>IIC_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, softiic.o(i.IIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC_Init &rArr; delay_ms &rArr; Delay_Ms &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setOutputHighOnPin
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setAsOutputPin
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Init
</UL>

<P><STRONG><a name="[111]"></a>IIC_start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, myiic.o(i.IIC_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_start
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setOutputLowOnPin
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setOutputHighOnPin
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nc_iic_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nc_iic_write_reg
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nc_iic_read_reg
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nc_iic_read_len
</UL>

<P><STRONG><a name="[112]"></a>IIC_stop</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, myiic.o(i.IIC_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setOutputLowOnPin
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setOutputHighOnPin
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nc_iic_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nc_iic_write_reg
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nc_iic_read_reg
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nc_iic_read_len
</UL>

<P><STRONG><a name="[113]"></a>IMU_Calibration</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, mpu6050.o(i.IMU_Calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = IMU_Calibration &rArr; ReadFlashParameterOne &rArr; EEPROM_Read_N_Data &rArr; AT24CXX_Read_Float &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; SOFT_IIC_Read_Byte &rArr; SOFT_IIC_NAck &rArr; SOFT_IIC_Delay &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashParameterOne
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Double_ReadI2C
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_MPU6050
</UL>

<P><STRONG><a name="[c6]"></a>IST8310_Read_Data</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, ist8310.o(i.IST8310_Read_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IST8310_Read_Data &rArr; Single_WriteI2C &rArr; nc_iic_write_reg &rArr; send_ch &rArr; WaitAck &rArr; GPIO_getInputPinValue
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Single_WriteI2C
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Single_ReadI2C
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Angle_Init
</UL>

<P><STRONG><a name="[117]"></a>Init_EPWM</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, wp_pwm.o(i.Init_EPWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Init_EPWM &rArr; EPWM_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_Output
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PWM
</UL>

<P><STRONG><a name="[11a]"></a>Init_I2C</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, myiic.o(i.Init_I2C))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Init_I2C &rArr; delay_ms &rArr; Delay_Ms &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setOutputHighOnPin
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setAsOutputPin
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[103]"></a>Init_MPU6050</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, mpu6050.o(i.Init_MPU6050))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = Init_MPU6050 &rArr; IMU_Calibration &rArr; ReadFlashParameterOne &rArr; EEPROM_Read_N_Data &rArr; AT24CXX_Read_Float &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; SOFT_IIC_Read_Byte &rArr; SOFT_IIC_NAck &rArr; SOFT_IIC_Delay &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Single_WriteI2C
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Single_ReadI2C
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Calibration
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Cutoff_Frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
</UL>

<P><STRONG><a name="[b7]"></a>Init_PWM</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, wp_pwm.o(i.Init_PWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Init_PWM &rArr; PWM_Output &rArr; EPWM_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Output
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GPIO_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_EPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_HardWave_Init
</UL>

<P><STRONG><a name="[18e]"></a>Interrupt_disableInterrupt</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, interrupt.o(i.Interrupt_disableInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T32_INT2_IRQHandler
</UL>

<P><STRONG><a name="[1d4]"></a>Interrupt_disableSleepOnIsrExit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, interrupt.o(i.Interrupt_disableSleepOnIsrExit))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[19a]"></a>Interrupt_enableInterrupt</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, interrupt.o(i.Interrupt_enableInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer32_init
</UL>

<P><STRONG><a name="[137]"></a>Interrupt_setPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, interrupt.o(i.Interrupt_setPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[11c]"></a>KalmanFilter</STRONG> (Thumb, 892 bytes, Stack size 88 bytes, sins.o(i.KalmanFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KalmanFilter &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strapdown_INS_High_Kalman
</UL>

<P><STRONG><a name="[fd]"></a>Key_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, key.o(i.Key_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Key_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
</UL>

<P><STRONG><a name="[11d]"></a>Key_Scan</STRONG> (Thumb, 558 bytes, Stack size 24 bytes, key.o(i.Key_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Key_Scan &rArr; LCD_CLS &rArr; LCD_WrDat &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CLS
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_delay
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[109]"></a>LCD_CLS</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oled.o(i.LCD_CLS))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_CLS &rArr; LCD_WrDat &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WrDat
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WrCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
</UL>

<P><STRONG><a name="[120]"></a>LCD_P6x8Char</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, oled.o(i.LCD_P6x8Char))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LCD_P6x8Char &rArr; LCD_Set_Pos &rArr; LCD_WrCmd &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WrDat
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Pos
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_6_8_number
</UL>

<P><STRONG><a name="[a8]"></a>LCD_P6x8Str</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, oled.o(i.LCD_P6x8Str))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_P6x8Str &rArr; LCD_Set_Pos &rArr; LCD_WrCmd &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WrDat
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Pos
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_6_8_number
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copyright_Show
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_HardWave_Init
</UL>

<P><STRONG><a name="[bb]"></a>LCD_P8x16Str</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, oled.o(i.LCD_P8x16Str))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_P8x16Str &rArr; LCD_Set_Pos &rArr; LCD_WrCmd &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WrDat
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Pos
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_HardWave_Init
</UL>

<P><STRONG><a name="[af]"></a>LCD_Set_Pos</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, oled.o(i.LCD_Set_Pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_Set_Pos &rArr; LCD_WrCmd &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WrCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_P6x8Char
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Logo1
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear_L
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_P8x16Str
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_P6x8Str
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_oled
</UL>

<P><STRONG><a name="[11f]"></a>LCD_WrCmd</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, oled.o(i.LCD_WrCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_WrCmd &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Pos
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear_L
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CLS
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_command
</UL>

<P><STRONG><a name="[b0]"></a>LCD_WrDat</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, oled.o(i.LCD_WrDat))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_WrDat &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_P6x8Char
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Logo1
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear_L
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_P8x16Str
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_P6x8Str
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CLS
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_oled
</UL>

<P><STRONG><a name="[a7]"></a>LCD_clear_L</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, oled.o(i.LCD_clear_L))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_clear_L &rArr; LCD_Set_Pos &rArr; LCD_WrCmd &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WrDat
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WrCmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Pos
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copyright_Show
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_HardWave_Init
</UL>

<P><STRONG><a name="[122]"></a>LPButterworth</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, filter.o(i.LPButterworth))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPButterworth
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SINS_Prepare
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Data_LPF_Filter
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Optflow_Prase
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Update
</UL>

<P><STRONG><a name="[12b]"></a>LS_Accumulate</STRONG> (Thumb, 252 bytes, Stack size 0 bytes, calibrationroutines.o(i.LS_Accumulate))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Calibartion_LS
</UL>

<P><STRONG><a name="[124]"></a>LS_Calculate</STRONG> (Thumb, 1404 bytes, Stack size 248 bytes, calibrationroutines.o(i.LS_Calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = LS_Calculate &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Calibartion_LS
</UL>

<P><STRONG><a name="[126]"></a>LS_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, calibrationroutines.o(i.LS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LS_Init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Calibration_Check
</UL>

<P><STRONG><a name="[bf]"></a>MPU6050_Read_Data</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, mpu6050.o(i.MPU6050_Read_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MPU6050_Read_Data &rArr; Nbyte_ReadI2C &rArr; nc_iic_read_len &rArr; send_ch &rArr; WaitAck &rArr; GPIO_getInputPinValue
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nbyte_ReadI2C
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Update
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Angle_Init
</UL>

<P><STRONG><a name="[128]"></a>MPU6050_Read_Temperature</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, mpu6050.o(i.MPU6050_Read_Temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MPU6050_Read_Temperature &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Update
</UL>

<P><STRONG><a name="[eb]"></a>Madgwick_AHRS_Update_IMU</STRONG> (Thumb, 2136 bytes, Stack size 256 bytes, sensor.o(i.Madgwick_AHRS_Update_IMU))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Madgwick_AHRS_Update_IMU &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Period
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invSqrt
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Status_Feedback
</UL>

<P><STRONG><a name="[12a]"></a>Mag_Calibartion_LS</STRONG> (Thumb, 1122 bytes, Stack size 48 bytes, calibration.o(i.Mag_Calibartion_LS))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = Mag_Calibartion_LS &rArr; LS_Calculate &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashParameter_Three
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LS_Calculate
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LS_Accumulate
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Plane_Sampling_Okay
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bling_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>Mag_Calibration_Check</STRONG> (Thumb, 728 bytes, Stack size 32 bytes, calibration.o(i.Mag_Calibration_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Mag_Calibration_Check &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LS_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_RC_Calibartion
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Accel_Calibartion
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bling_Set
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_All_Calibartion
</UL>

<P><STRONG><a name="[12e]"></a>Main_Leading_Control</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, wp_ctrl.o(i.Main_Leading_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Main_Leading_Control &rArr; Auto_Flight_Ctrl &rArr; NCQ_SDK_Run &rArr; move_with_z_target &rArr; OpticalFlow_Control_Pure &rArr; OpticalFlow_Vel_Control &rArr; accel_to_lean_angles &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Control_Pure
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flight_Alt_Hold_Control
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;land_run
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Flight_Ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Total_Control
</UL>

<P><STRONG><a name="[cf]"></a>Modf</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, wp_math.o(i.Modf))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastPow
</UL>

<P><STRONG><a name="[bd]"></a>NCLink_Data_Prase_Prepare</STRONG> (Thumb, 314 bytes, Stack size 8 bytes, nclink.o(i.NCLink_Data_Prase_Prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = NCLink_Data_Prase_Prepare &rArr; NCLink_Data_Prase_Process &rArr; Other_Parameter_Default &rArr; WriteFlashParameter &rArr; EEPROM_Write_N_Data &rArr; AT24CXX_Write_Data &rArr; AT24CXX_Write &rArr; AT24CXX_WriteOneByte &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Data_Prase_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EUSCIA2_IRQHandler
</UL>

<P><STRONG><a name="[130]"></a>NCLink_Data_Prase_Process</STRONG> (Thumb, 4236 bytes, Stack size 40 bytes, nclink.o(i.NCLink_Data_Prase_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = NCLink_Data_Prase_Process &rArr; Other_Parameter_Default &rArr; WriteFlashParameter &rArr; EEPROM_Write_N_Data &rArr; AT24CXX_Write_Data &rArr; AT24CXX_Write &rArr; AT24CXX_WriteOneByte &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashParameter
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Other_Parameter_Default
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume_Factory_Setting
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pilot_Status_Tick
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Data_Prase_Prepare
</UL>

<P><STRONG><a name="[75]"></a>NCQ_SDK_Run</STRONG> (Thumb, 282 bytes, Stack size 8 bytes, namelesscotrun_sdk.o(i.NCQ_SDK_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = NCQ_SDK_Run &rArr; move_with_z_target &rArr; OpticalFlow_Control_Pure &rArr; OpticalFlow_Vel_Control &rArr; accel_to_lean_angles &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Control_Pure
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flight_Alt_Hold_Control
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_black
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_with_z_target
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_with_xy_target
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Flight_Ctrl
</UL>

<P><STRONG><a name="[ba]"></a>NVIC_Configuration</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, time_cnt.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt_setPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_HardWave_Init
</UL>

<P><STRONG><a name="[127]"></a>Nbyte_ReadI2C</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, myiic.o(i.Nbyte_ReadI2C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Nbyte_ReadI2C &rArr; nc_iic_read_len &rArr; send_ch &rArr; WaitAck &rArr; GPIO_getInputPinValue
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nc_iic_read_len
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Read_Data
</UL>

<P><STRONG><a name="[138]"></a>OLED_Init</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, oled.o(i.OLED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OLED_Init &rArr; Draw_Logo1 &rArr; LCD_Set_Pos &rArr; LCD_WrCmd &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_begin
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Ms
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Logo1
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[b8]"></a>OLED_Init_Fast</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, oled.o(i.OLED_Init_Fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OLED_Init_Fast &rArr; ssd1306_begin &rArr; ssd1306_command &rArr; LCD_WrCmd &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_begin
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Ms
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_HardWave_Init
</UL>

<P><STRONG><a name="[ea]"></a>Observation_Angle_Calculate</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, sensor.o(i.Observation_Angle_Calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Observation_Angle_Calculate
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_atan
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastAtan2
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invSqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Status_Feedback
</UL>

<P><STRONG><a name="[188]"></a>Observation_Tradeoff</STRONG> (Thumb, 540 bytes, Stack size 0 bytes, sins.o(i.Observation_Tradeoff))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strapdown_INS_High_Kalman
</UL>

<P><STRONG><a name="[13a]"></a>Openmv_Data_Receive_Anl_1</STRONG> (Thumb, 774 bytes, Stack size 24 bytes, namelesscotrun_sdk.o(i.Openmv_Data_Receive_Anl_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Openmv_Data_Receive_Anl_1 &rArr; Sensor_Parameter_Sort
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastSqrt
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Parameter_Sort
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_Data_Receive_Prepare
</UL>

<P><STRONG><a name="[13c]"></a>Openmv_Data_Receive_Anl_2</STRONG> (Thumb, 682 bytes, Stack size 96 bytes, namelesscotrun_sdk.o(i.Openmv_Data_Receive_Anl_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Openmv_Data_Receive_Anl_2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastSqrt
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_Data_Receive_Prepare
</UL>

<P><STRONG><a name="[13e]"></a>Optflow_Prase</STRONG> (Thumb, 510 bytes, Stack size 8 bytes, namelesscorun_opticalflow.o(i.Optflow_Prase))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Optflow_Prase &rArr; OpticalFlow_Rotate_Complementary_Filter &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPButterworth
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Rotate_Complementary_Filter
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Optflow_Statemachine
</UL>

<P><STRONG><a name="[140]"></a>Optflow_Statemachine</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, namelesscorun_opticalflow.o(i.Optflow_Statemachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Optflow_Statemachine &rArr; OpticalFlow_CF &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_CF
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Optflow_Prase
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_400hz_Thread
</UL>

<P><STRONG><a name="[141]"></a>OpticalFlow_CF</STRONG> (Thumb, 734 bytes, Stack size 56 bytes, namelesscorun_opticalflow.o(i.OpticalFlow_CF))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OpticalFlow_CF &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Period
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Optflow_Statemachine
</UL>

<P><STRONG><a name="[7b]"></a>OpticalFlow_Control</STRONG> (Thumb, 378 bytes, Stack size 8 bytes, opticalflow_control.o(i.OpticalFlow_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OpticalFlow_Control &rArr; OpticalFlow_Vel_Control &rArr; accel_to_lean_angles &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pythagorous2
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_LPF_Reset
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Systime
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Expect_Speed_Mapping
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Ctrl_Reset
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Vel_Control
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Pos_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Flight_Ctrl
</UL>

<P><STRONG><a name="[96]"></a>OpticalFlow_Control_Pure</STRONG> (Thumb, 302 bytes, Stack size 8 bytes, opticalflow_control.o(i.OpticalFlow_Control_Pure))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OpticalFlow_Control_Pure &rArr; OpticalFlow_Vel_Control &rArr; accel_to_lean_angles &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Vel_Control
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Pos_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color_Block_Control_Pliot
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_black
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Top_APrilTag_Control_Pliot
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Track_Control_Pliot
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Front_AprilTag_Control_Pliot
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_with_z_target
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_with_xy_target
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCQ_SDK_Run
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Total_Control
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Leading_Control
</UL>

<P><STRONG><a name="[9f]"></a>OpticalFlow_Ctrl_Reset</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, opticalflow_control.o(i.OpticalFlow_Ctrl_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Control
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_Output
</UL>

<P><STRONG><a name="[144]"></a>OpticalFlow_Expect_Speed_Mapping</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, opticalflow_control.o(i.OpticalFlow_Expect_Speed_Mapping))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OpticalFlow_Expect_Speed_Mapping &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Control
</UL>

<P><STRONG><a name="[146]"></a>OpticalFlow_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, namelesscorun_opticalflow.o(i.OpticalFlow_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = OpticalFlow_Init &rArr; Set_Cutoff_Frequency &rArr; __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Cutoff_Frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Init
</UL>

<P><STRONG><a name="[143]"></a>OpticalFlow_Pos_Control</STRONG> (Thumb, 360 bytes, Stack size 8 bytes, opticalflow_control.o(i.OpticalFlow_Pos_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OpticalFlow_Pos_Control &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Control_Pure
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Control
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_with_xy_target
</UL>

<P><STRONG><a name="[13f]"></a>OpticalFlow_Rotate_Complementary_Filter</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, namelesscorun_opticalflow.o(i.OpticalFlow_Rotate_Complementary_Filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OpticalFlow_Rotate_Complementary_Filter &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Optflow_Prase
</UL>

<P><STRONG><a name="[9e]"></a>OpticalFlow_SINS_Reset</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, opticalflow_control.o(i.OpticalFlow_SINS_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_Output
</UL>

<P><STRONG><a name="[97]"></a>OpticalFlow_Vel_Control</STRONG> (Thumb, 482 bytes, Stack size 16 bytes, opticalflow_control.o(i.OpticalFlow_Vel_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OpticalFlow_Vel_Control &rArr; accel_to_lean_angles &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_to_lean_angles
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Control_Pure
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color_Block_Control_Pliot
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Top_APrilTag_Control_Pliot
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Track_Control_Pliot
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Front_AprilTag_Control_Pliot
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Control
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_with_xy_target
</UL>

<P><STRONG><a name="[132]"></a>Other_Parameter_Default</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, calibration.o(i.Other_Parameter_Default))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Other_Parameter_Default &rArr; WriteFlashParameter &rArr; EEPROM_Write_N_Data &rArr; AT24CXX_Write_Data &rArr; AT24CXX_Write &rArr; AT24CXX_WriteOneByte &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashParameter
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Data_Prase_Process
</UL>

<P><STRONG><a name="[101]"></a>Other_Parameter_Init</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, calibration.o(i.Other_Parameter_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = Other_Parameter_Init &rArr; ReadFlashParameterOne &rArr; EEPROM_Read_N_Data &rArr; AT24CXX_Read_Float &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; SOFT_IIC_Read_Byte &rArr; SOFT_IIC_NAck &rArr; SOFT_IIC_Delay &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashParameterOne
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
</UL>

<P><STRONG><a name="[70]"></a>PID_Control</STRONG> (Thumb, 486 bytes, Stack size 16 bytes, pid.o(i.PID_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PID_Control &rArr; Test_Period
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Period
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flight_Alt_Hold_Control
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;land_althold
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_Control_Target
</UL>

<P><STRONG><a name="[d2]"></a>PID_Control_Div_LPF</STRONG> (Thumb, 530 bytes, Stack size 24 bytes, pid.o(i.PID_Control_Div_LPF))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PID_Control_Div_LPF &rArr; Test_Period
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Period
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_Device_LPF
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flight_Alt_Hold_Control
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature_Ctrl
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Control
</UL>

<P><STRONG><a name="[f1]"></a>PID_Control_Div_LPF_For_Gyro</STRONG> (Thumb, 618 bytes, Stack size 24 bytes, pid.o(i.PID_Control_Div_LPF_For_Gyro))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PID_Control_Div_LPF_For_Gyro &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Period
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_Device_LPF
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Control
</UL>

<P><STRONG><a name="[95]"></a>PID_Control_SDK_Err_LPF</STRONG> (Thumb, 568 bytes, Stack size 24 bytes, pid.o(i.PID_Control_SDK_Err_LPF))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PID_Control_SDK_Err_LPF &rArr; Test_Period
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Period
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_Device_LPF
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color_Block_Control_Pliot
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Top_APrilTag_Control_Pliot
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Track_Control_Pliot
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Front_AprilTag_Control_Pliot
</UL>

<P><STRONG><a name="[71]"></a>PID_Control_Yaw</STRONG> (Thumb, 530 bytes, Stack size 16 bytes, pid.o(i.PID_Control_Yaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PID_Control_Yaw &rArr; Test_Period
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Period
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_Control_Target
</UL>

<P><STRONG><a name="[19c]"></a>PID_Init</STRONG> (Thumb, 366 bytes, Stack size 0 bytes, pid.o(i.PID_Init))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Total_PID_Init
</UL>

<P><STRONG><a name="[191]"></a>PID_Integrate_Reset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pid.o(i.PID_Integrate_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Throttle_Control_Reset
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Off_Reset
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yaw_Fault_Check
</UL>

<P><STRONG><a name="[145]"></a>PID_LPF_Reset</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, pid.o(i.PID_LPF_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Throttle_Control_Reset
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Control
</UL>

<P><STRONG><a name="[100]"></a>PID_Paramter_Init_With_Flash</STRONG> (Thumb, 814 bytes, Stack size 16 bytes, pid.o(i.PID_Paramter_Init_With_Flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = PID_Paramter_Init_With_Flash &rArr; ReadFlashParameterThree &rArr; EEPROM_Read_N_Data &rArr; AT24CXX_Read_Float &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; SOFT_IIC_Read_Byte &rArr; SOFT_IIC_NAck &rArr; SOFT_IIC_Delay &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashParameterThree
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Total_PID_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
</UL>

<P><STRONG><a name="[32]"></a>PORT3_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gy53l1x.o(i.PORT3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PORT3_IRQHandler &rArr; GY53L1X_In2_IRQHandler &rArr; GY53L1X_In2_UP &rArr; GPIO_interruptEdgeSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY53L1X_In2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>PORT5_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gy53l1x.o(i.PORT5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PORT5_IRQHandler &rArr; GY53L1X_In1_IRQHandler &rArr; GY53L1X_In1_UP &rArr; GPIO_interruptEdgeSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY53L1X_In1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>PORT6_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ppm.o(i.PORT6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PORT6_IRQHandler &rArr; US100_IRQHandler &rArr; US100_DN &rArr; GPIO_interruptEdgeSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;US100_IRQHandler
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[14c]"></a>PPM_IRQHandler</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, ppm.o(i.PPM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PPM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer32_getValue
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT6_IRQHandler
</UL>

<P><STRONG><a name="[b6]"></a>PPM_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ppm.o(i.PPM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PPM_Init &rArr; GPIO_interruptEdgeSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_interruptEdgeSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_HardWave_Init
</UL>

<P><STRONG><a name="[11b]"></a>PWM_GPIO_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, wp_pwm.o(i.PWM_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWM_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PWM
</UL>

<P><STRONG><a name="[a2]"></a>PWM_Output</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, wp_pwm.o(i.PWM_Output))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PWM_Output &rArr; EPWM_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_Calibration
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PWM
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_Output
</UL>

<P><STRONG><a name="[67]"></a>Parameter_Init</STRONG> (Thumb, 1048 bytes, Stack size 24 bytes, calibration.o(i.Parameter_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = Parameter_Init &rArr; ReadFlashParameterThree &rArr; EEPROM_Read_N_Data &rArr; AT24CXX_Read_Float &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; SOFT_IIC_Read_Byte &rArr; SOFT_IIC_NAck &rArr; SOFT_IIC_Delay &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashParameterThree
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashParameterOne
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Horizontal_Calibration_Check
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Calibartion
</UL>

<P><STRONG><a name="[131]"></a>Pilot_Status_Tick</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nclink.o(i.Pilot_Status_Tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Pilot_Status_Tick &rArr; Bling_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bling_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Data_Prase_Process
</UL>

<P><STRONG><a name="[14f]"></a>QuadShow</STRONG> (Thumb, 11180 bytes, Stack size 64 bytes, key.o(i.QuadShow))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = QuadShow &rArr; Copyright_Show &rArr; write_6_8_number &rArr; LCD_P6x8Str &rArr; LCD_Set_Pos &rArr; LCD_WrCmd &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashParameter
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bling_Set
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_6_8_number
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_fill_circle
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_line
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_circle
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_display
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_clear_display
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DT_Send_Check
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear_L
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_P8x16Str
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_P6x8Str
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CLS
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copyright_Show
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fb]"></a>Quad_Start_Bling</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, bling.o(i.Quad_Start_Bling))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Quad_Start_Bling &rArr; Bling_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bling_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
</UL>

<P><STRONG><a name="[156]"></a>Quaternion_Init</STRONG> (Thumb, 1494 bytes, Stack size 72 bytes, sensor.o(i.Quaternion_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Quaternion_Init &rArr; Euler_Angle_Init &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Angle_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WP_Quad_Init
</UL>

<P><STRONG><a name="[157]"></a>RC_Calibration_Check</STRONG> (Thumb, 366 bytes, Stack size 16 bytes, calibration.o(i.RC_Calibration_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = RC_Calibration_Check &rArr; WriteFlashParameter_Two &rArr; EEPROM_Write_N_Data &rArr; AT24CXX_Write_Data &rArr; AT24CXX_Write &rArr; AT24CXX_WriteOneByte &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashParameter_Two
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[159]"></a>RC_Calibration_Init</STRONG> (Thumb, 652 bytes, Stack size 80 bytes, calibration.o(i.RC_Calibration_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = RC_Calibration_Init &rArr; ReadFlashParameterTwo &rArr; EEPROM_Read_N_Data &rArr; AT24CXX_Read_Float &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; SOFT_IIC_Read_Byte &rArr; SOFT_IIC_NAck &rArr; SOFT_IIC_Delay &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashParameterTwo
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Calibration_Trigger
</UL>

<P><STRONG><a name="[15b]"></a>RC_Calibration_RESET</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, calibration.o(i.RC_Calibration_RESET))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Calibration_Trigger
</UL>

<P><STRONG><a name="[fe]"></a>RC_Calibration_Trigger</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, calibration.o(i.RC_Calibration_Trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = RC_Calibration_Trigger &rArr; RC_Calibration_Init &rArr; ReadFlashParameterTwo &rArr; EEPROM_Read_N_Data &rArr; AT24CXX_Read_Float &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; SOFT_IIC_Read_Byte &rArr; SOFT_IIC_NAck &rArr; SOFT_IIC_Delay &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Calibration_RESET
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Calibration_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
</UL>

<P><STRONG><a name="[15c]"></a>RC_Data_LPF_Filter</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, rc.o(i.RC_Data_LPF_Filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RC_Data_LPF_Filter &rArr; LPButterworth
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPButterworth
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Control
</UL>

<P><STRONG><a name="[163]"></a>RC_Scale_Set</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, rc.o(i.RC_Scale_Set))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Control
</UL>

<P><STRONG><a name="[10b]"></a>ReadFlashParameterOne</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, wp_flash.o(i.ReadFlashParameterOne))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = ReadFlashParameterOne &rArr; EEPROM_Read_N_Data &rArr; AT24CXX_Read_Float &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; SOFT_IIC_Read_Byte &rArr; SOFT_IIC_NAck &rArr; SOFT_IIC_Delay &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read_N_Data
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Other_Parameter_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Horizontal_Calibration_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Calibration
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_Init
</UL>

<P><STRONG><a name="[14b]"></a>ReadFlashParameterThree</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, wp_flash.o(i.ReadFlashParameterThree))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = ReadFlashParameterThree &rArr; EEPROM_Read_N_Data &rArr; AT24CXX_Read_Float &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; SOFT_IIC_Read_Byte &rArr; SOFT_IIC_NAck &rArr; SOFT_IIC_Delay &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read_N_Data
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Paramter_Init_With_Flash
</UL>

<P><STRONG><a name="[15a]"></a>ReadFlashParameterTwo</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, wp_flash.o(i.ReadFlashParameterTwo))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ReadFlashParameterTwo &rArr; EEPROM_Read_N_Data &rArr; AT24CXX_Read_Float &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; SOFT_IIC_Read_Byte &rArr; SOFT_IIC_NAck &rArr; SOFT_IIC_Delay &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read_N_Data
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Calibration_Init
</UL>

<P><STRONG><a name="[15e]"></a>Read_Button_State_All</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, key.o(i.Read_Button_State_All))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Read_Button_State_All &rArr; Read_Button_State_One
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Button_State_One
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_400hz_Thread
</UL>

<P><STRONG><a name="[15f]"></a>Read_Button_State_One</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, key.o(i.Read_Button_State_One))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Read_Button_State_One
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Button_State_All
</UL>

<P><STRONG><a name="[161]"></a>Remote_Control</STRONG> (Thumb, 1952 bytes, Stack size 32 bytes, rc.o(i.Remote_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Remote_Control &rArr; RC_Data_LPF_Filter &rArr; LPButterworth
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_All_Calibartion
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Calibration_Flag
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bling_Set
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_int16_t
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Lock_Cnt
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Data_Remap
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Scale_Set
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Data_LPF_Filter
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_400hz_Thread
</UL>

<P><STRONG><a name="[162]"></a>Remote_Data_Remap</STRONG> (Thumb, 350 bytes, Stack size 8 bytes, rc.o(i.Remote_Data_Remap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Remote_Data_Remap
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Control
</UL>

<P><STRONG><a name="[12d]"></a>Reset_Accel_Calibartion</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, calibration.o(i.Reset_Accel_Calibartion))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_All_Calibartion
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Calibration_Check
</UL>

<P><STRONG><a name="[166]"></a>Reset_All_Calibartion</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, calibration.o(i.Reset_All_Calibartion))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Reset_All_Calibartion
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_RC_Calibartion
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Mag_Calibartion
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Accel_Calibartion
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Control
</UL>

<P><STRONG><a name="[165]"></a>Reset_Lock_Cnt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rc.o(i.Reset_Lock_Cnt))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Control
</UL>

<P><STRONG><a name="[6d]"></a>Reset_Mag_Calibartion</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, calibration.o(i.Reset_Mag_Calibartion))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_All_Calibartion
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Calibration_Check
</UL>

<P><STRONG><a name="[6e]"></a>Reset_RC_Calibartion</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, calibration.o(i.Reset_RC_Calibartion))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_All_Calibartion
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Calibration_Check
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Calibration_Check
</UL>

<P><STRONG><a name="[133]"></a>Resume_Factory_Setting</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, license.o(i.Resume_Factory_Setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Resume_Factory_Setting &rArr; AT24CXX_Write &rArr; AT24CXX_WriteOneByte &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_getInputPinValue
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Data_Prase_Process
</UL>

<P><STRONG><a name="[bc]"></a>RingBuf_Write</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ringbuf.o(i.RingBuf_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RingBuf_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EUSCIA3_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EUSCIA1_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EUSCIA0_IRQHandler
</UL>

<P><STRONG><a name="[168]"></a>SDA_IOIN</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, myiic.o(i.SDA_IOIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDA_IOIN
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setAsInputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ch
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitAck
</UL>

<P><STRONG><a name="[10f]"></a>SDA_IOOUT</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, myiic.o(i.SDA_IOOUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDA_IOOUT
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setAsOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ch
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitAck
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendACK
</UL>

<P><STRONG><a name="[16a]"></a>SDK_DT_Reset</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, namelesscotrun_sdk.o(i.SDK_DT_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDK_DT_Reset &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_Init
</UL>

<P><STRONG><a name="[150]"></a>SDK_DT_Send_Check</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, namelesscotrun_sdk.o(i.SDK_DT_Send_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDK_DT_Send_Check &rArr; USART3_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Send
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_OPENMV_Config
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_Init
</UL>

<P><STRONG><a name="[16d]"></a>SDK_Data_Prase_1</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, namelesscotrun_sdk.o(i.SDK_Data_Prase_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SDK_Data_Prase_1 &rArr; SDK_Data_Receive_Prepare &rArr; Openmv_Data_Receive_Anl_2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_Data_Receive_Prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_400hz_Thread
</UL>

<P><STRONG><a name="[16f]"></a>SDK_Data_Prase_2</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, namelesscotrun_sdk.o(i.SDK_Data_Prase_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SDK_Data_Prase_2 &rArr; SDK_Data_Receive_Prepare &rArr; Openmv_Data_Receive_Anl_2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_Data_Receive_Prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_400hz_Thread
</UL>

<P><STRONG><a name="[16e]"></a>SDK_Data_Receive_Prepare</STRONG> (Thumb, 334 bytes, Stack size 16 bytes, namelesscotrun_sdk.o(i.SDK_Data_Receive_Prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SDK_Data_Receive_Prepare &rArr; Openmv_Data_Receive_Anl_2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Openmv_Data_Receive_Anl_2
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Openmv_Data_Receive_Anl_1
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_Data_Prase_2
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_Data_Prase_1
</UL>

<P><STRONG><a name="[106]"></a>SDK_Init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, namelesscotrun_sdk.o(i.SDK_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = SDK_Init &rArr; ReadFlashParameterOne &rArr; EEPROM_Read_N_Data &rArr; AT24CXX_Read_Float &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; SOFT_IIC_Read_Byte &rArr; SOFT_IIC_NAck &rArr; SOFT_IIC_Delay &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashParameterOne
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DT_Send_Check
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DT_Reset
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
</UL>

<P><STRONG><a name="[171]"></a>SDK_OPENMV_Config</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, myfile.o(i.SDK_OPENMV_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDK_OPENMV_Config &rArr; SDK_DT_Send_Check &rArr; USART3_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DT_Send_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ed]"></a>SINS_Prepare</STRONG> (Thumb, 490 bytes, Stack size 40 bytes, sins.o(i.SINS_Prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SINS_Prepare &rArr; LPButterworth
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPButterworth
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_From_BodyFrame2EarthFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Status_Feedback
</UL>

<P><STRONG><a name="[173]"></a>SOFT_IIC_Ack</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, softiic.o(i.SOFT_IIC_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SOFT_IIC_Ack &rArr; SOFT_IIC_Delay &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setOutputLowOnPin
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setOutputHighOnPin
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_SDA_OUT
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Read_Byte
</UL>

<P><STRONG><a name="[175]"></a>SOFT_IIC_Delay</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, softiic.o(i.SOFT_IIC_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SOFT_IIC_Delay &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_NAck
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Ack
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Wait_Ack
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Stop
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Start
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Send_Byte
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Read_Byte
</UL>

<P><STRONG><a name="[177]"></a>SOFT_IIC_NAck</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, softiic.o(i.SOFT_IIC_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SOFT_IIC_NAck &rArr; SOFT_IIC_Delay &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setOutputLowOnPin
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setOutputHighOnPin
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_SDA_OUT
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Read_Byte
</UL>

<P><STRONG><a name="[5f]"></a>SOFT_IIC_Read_Byte</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, softiic.o(i.SOFT_IIC_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SOFT_IIC_Read_Byte &rArr; SOFT_IIC_NAck &rArr; SOFT_IIC_Delay &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setOutputLowOnPin
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setOutputHighOnPin
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_getInputPinValue
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_SDA_IN
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_NAck
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Delay
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[5d]"></a>SOFT_IIC_Send_Byte</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, softiic.o(i.SOFT_IIC_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SOFT_IIC_Send_Byte &rArr; SOFT_IIC_Delay &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setOutputLowOnPin
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setOutputHighOnPin
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_SDA_OUT
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[5c]"></a>SOFT_IIC_Start</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, softiic.o(i.SOFT_IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SOFT_IIC_Start &rArr; SOFT_IIC_Delay &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setOutputLowOnPin
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setOutputHighOnPin
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_SDA_OUT
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[60]"></a>SOFT_IIC_Stop</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, softiic.o(i.SOFT_IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setOutputLowOnPin
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setOutputHighOnPin
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_SDA_OUT
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Wait_Ack
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[5e]"></a>SOFT_IIC_Wait_Ack</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, softiic.o(i.SOFT_IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setOutputLowOnPin
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setOutputHighOnPin
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_getInputPinValue
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_SDA_IN
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Delay
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[178]"></a>SOFT_SDA_IN</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, softiic.o(i.SOFT_SDA_IN))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SOFT_SDA_IN
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setAsInputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Wait_Ack
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Read_Byte
</UL>

<P><STRONG><a name="[174]"></a>SOFT_SDA_OUT</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, softiic.o(i.SOFT_SDA_OUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SOFT_SDA_OUT
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setAsOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_NAck
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Ack
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Stop
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Start
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Send_Byte
</UL>

<P><STRONG><a name="[104]"></a>SPL06_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, spl06.o(i.SPL06_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SPL06_Init &rArr; spl0601_rateset &rArr; spl0601_write &rArr; Single_WriteI2C &rArr; nc_iic_write_reg &rArr; send_ch &rArr; WaitAck &rArr; GPIO_getInputPinValue
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_start_continuous
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_rateset
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
</UL>

<P><STRONG><a name="[17b]"></a>SPL06_Read_Data</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, spl06.o(i.SPL06_Read_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SPL06_Read_Data &rArr; user_spl0601_get &rArr; spl0601_get_raw_temp &rArr; spl0601_read &rArr; Single_ReadI2C &rArr; nc_iic_read_reg &rArr; send_ch &rArr; WaitAck &rArr; GPIO_getInputPinValue
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_spl0601_get
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Update
</UL>

<P><STRONG><a name="[17d]"></a>Save_Or_Reset_PID_Parameter</STRONG> (Thumb, 1732 bytes, Stack size 8 bytes, pid.o(i.Save_Or_Reset_PID_Parameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = Save_Or_Reset_PID_Parameter &rArr; Save_PID_Parameter &rArr; WriteFlashParameter_Three &rArr; EEPROM_Write_N_Data &rArr; AT24CXX_Write_Data &rArr; AT24CXX_Write &rArr; AT24CXX_WriteOneByte &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Total_PID_Init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_PID_Parameter
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17e]"></a>Save_PID_Parameter</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, pid.o(i.Save_PID_Parameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Save_PID_Parameter &rArr; WriteFlashParameter_Three &rArr; EEPROM_Write_N_Data &rArr; AT24CXX_Write_Data &rArr; AT24CXX_Write &rArr; AT24CXX_WriteOneByte &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashParameter_Three
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Or_Reset_PID_Parameter
</UL>

<P><STRONG><a name="[79]"></a>Self_Track_Control_Pliot</STRONG> (Thumb, 430 bytes, Stack size 8 bytes, opticalflow_control.o(i.Self_Track_Control_Pliot))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Self_Track_Control_Pliot &rArr; OpticalFlow_Control_Pure &rArr; OpticalFlow_Vel_Control &rArr; accel_to_lean_angles &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Control_Pure
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Control_SDK_Err_LPF
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Vel_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Flight_Ctrl
</UL>

<P><STRONG><a name="[13b]"></a>Sensor_Parameter_Sort</STRONG> (Thumb, 392 bytes, Stack size 48 bytes, namelesscotrun_sdk.o(i.Sensor_Parameter_Sort))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Sensor_Parameter_Sort
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_atan
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastTan
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Openmv_Data_Receive_Anl_1
</UL>

<P><STRONG><a name="[e9]"></a>Sensor_Update</STRONG> (Thumb, 926 bytes, Stack size 8 bytes, sensor.o(i.Sensor_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Sensor_Update &rArr; Gyro_Calibration_Check &rArr; Euler_Angle_Init_Again &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Calibration_Check
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Read_Temperature
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Read_Data
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPButterworth
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GildeAverageValueFilter_MAG
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPL06_Read_Data
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pythagorous3
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compass_Fault_Check
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Baro_Offset
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Status_Feedback
</UL>

<P><STRONG><a name="[7f]"></a>Set_Cutoff_Frequency</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, filter.o(i.Set_Cutoff_Frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Set_Cutoff_Frequency &rArr; __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Total_PID_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_MPU6050
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Butterworth_Parameter_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Init
</UL>

<P><STRONG><a name="[fc]"></a>Simulation_PWM_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, temperature_ctrl.o(i.Simulation_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Simulation_PWM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
</UL>

<P><STRONG><a name="[196]"></a>Simulation_PWM_Output</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, temperature_ctrl.o(i.Simulation_PWM_Output))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Simulation_PWM_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature_Ctrl
</UL>

<P><STRONG><a name="[116]"></a>Single_ReadI2C</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, myiic.o(i.Single_ReadI2C))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Single_ReadI2C &rArr; nc_iic_read_reg &rArr; send_ch &rArr; WaitAck &rArr; GPIO_getInputPinValue
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nc_iic_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_MPU6050
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_read
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IST8310_Read_Data
</UL>

<P><STRONG><a name="[115]"></a>Single_WriteI2C</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, myiic.o(i.Single_WriteI2C))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Single_WriteI2C &rArr; nc_iic_write_reg &rArr; send_ch &rArr; WaitAck &rArr; GPIO_getInputPinValue
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nc_iic_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_MPU6050
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_write
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IST8310_Read_Data
</UL>

<P><STRONG><a name="[ee]"></a>Strapdown_INS_High_Kalman</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, sins.o(i.Strapdown_INS_High_Kalman))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Strapdown_INS_High_Kalman &rArr; KalmanFilter &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Period
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Observation_Tradeoff
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Status_Feedback
</UL>

<P><STRONG><a name="[8a]"></a>SysCtl_disableNMISource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sysctl.o(i.SysCtl_disableNMISource))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_startHFXTWithTimeout
</UL>

<P><STRONG><a name="[8c]"></a>SysCtl_enableNMISource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sysctl.o(i.SysCtl_enableNMISource))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_startHFXTWithTimeout
</UL>

<P><STRONG><a name="[89]"></a>SysCtl_getNMISourceStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sysctl.o(i.SysCtl_getNMISourceStatus))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_startHFXTWithTimeout
</UL>

<P><STRONG><a name="[83]"></a>SysCtl_getTLVInfo</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sysctl.o(i.SysCtl_getTLVInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysCtl_getTLVInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_getDCOFrequency
</UL>

<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, time.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SystemInit</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, system_msp432p401r.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(.text)
</UL>
<P><STRONG><a name="[f4]"></a>System_Init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, license.o(i.System_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = System_Init &rArr; ReadFlashParameterOne &rArr; EEPROM_Read_N_Data &rArr; AT24CXX_Read_Float &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; SOFT_IIC_Read_Byte &rArr; SOFT_IIC_NAck &rArr; SOFT_IIC_Delay &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashParameterOne
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_I2C
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPM_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PWM
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysTick_Config
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_HardWave_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
</UL>

<P><STRONG><a name="[27]"></a>T32_INT2_IRQHandler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, license.o(i.T32_INT2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = T32_INT2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt_disableInterrupt
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer32_setCount
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer32_clearInterruptFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TA2_0_IRQHandler</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, time_cnt.o(i.TA2_0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = TA2_0_IRQHandler &rArr; Task_200hz_Thread &rArr; Get_Status_Feedback &rArr; Madgwick_AHRS_Update_IMU &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Period
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_400hz_Thread
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_200hz_Thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[197]"></a>TIMER_A2_Configuration</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, time_cnt.o(i.TIMER_A2_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_A2_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_init
</UL>

<P><STRONG><a name="[9d]"></a>Take_Off_Reset</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, pid.o(i.Take_Off_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Take_Off_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Integrate_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;land_nogps_run
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controler_Mode_Select
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_Output
</UL>

<P><STRONG><a name="[18f]"></a>Task_200hz_Thread</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, time_cnt.o(i.Task_200hz_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Task_200hz_Thread &rArr; Get_Status_Feedback &rArr; Madgwick_AHRS_Update_IMU &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Status_Feedback
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GankerPilot_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TA2_0_IRQHandler
</UL>

<P><STRONG><a name="[190]"></a>Task_400hz_Thread</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, time_cnt.o(i.Task_400hz_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = Task_400hz_Thread &rArr; Check_All_Calibartion &rArr; Horizontal_Calibration_Check &rArr; Parameter_Init &rArr; ReadFlashParameterThree &rArr; EEPROM_Read_N_Data &rArr; AT24CXX_Read_Float &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; SOFT_IIC_Read_Byte &rArr; SOFT_IIC_NAck &rArr; SOFT_IIC_Delay &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_All_Calibartion
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bling_Working
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Button_State_All
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Control
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vcan_Send
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;US_100_Statemachine
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_Data_Prase_2
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_Data_Prase_1
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Optflow_Statemachine
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Battery_Voltage
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY53L1X_Data_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TA2_0_IRQHandler
</UL>

<P><STRONG><a name="[e4]"></a>Temperature_Ctrl</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, temperature_ctrl.o(i.Temperature_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Temperature_Ctrl &rArr; PID_Control_Div_LPF &rArr; Test_Period
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Control_Div_LPF
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Simulation_PWM_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GankerPilot_Control
</UL>

<P><STRONG><a name="[107]"></a>Temperature_Ctrl_Init</STRONG> (Thumb, 296 bytes, Stack size 0 bytes, temperature_ctrl.o(i.Temperature_Ctrl_Init))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
</UL>

<P><STRONG><a name="[f0]"></a>Temperature_State_Check</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, temperature_ctrl.o(i.Temperature_State_Check))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Calibration_Check
</UL>

<P><STRONG><a name="[e8]"></a>Test_Period</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, license.o(i.Test_Period))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Test_Period
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer32_getValue
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Control_Yaw
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Control_SDK_Err_LPF
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Control_Div_LPF_For_Gyro
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Control_Div_LPF
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Control
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strapdown_INS_High_Kalman
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Status_Feedback
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TA2_0_IRQHandler
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_with_z_target
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_CF
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick_AHRS_Update_IMU
</UL>

<P><STRONG><a name="[a4]"></a>Thr_Push_Over_Deadband</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, control_althold.o(i.Thr_Push_Over_Deadband))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controler_Mode_Select
</UL>

<P><STRONG><a name="[1bf]"></a>Thr_Scale_Set</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, control_althold.o(i.Thr_Scale_Set))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;land_althold
</UL>

<P><STRONG><a name="[9b]"></a>Throttle_Angle_Compensate</STRONG> (Thumb, 538 bytes, Stack size 24 bytes, wp_ctrl.o(i.Throttle_Angle_Compensate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Throttle_Angle_Compensate &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_Output
</UL>

<P><STRONG><a name="[a1]"></a>Throttle_Control_Reset</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, pid.o(i.Throttle_Control_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Throttle_Control_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_LPF_Reset
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Integrate_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_Output
</UL>

<P><STRONG><a name="[108]"></a>Time_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, time_cnt.o(i.Time_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Time_init &rArr; Timer32_init &rArr; Timer32_initModule
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer32_init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_A2_Configuration
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
</UL>

<P><STRONG><a name="[18c]"></a>Timer32_clearInterruptFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer32.o(i.Timer32_clearInterruptFlag))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T32_INT2_IRQHandler
</UL>

<P><STRONG><a name="[199]"></a>Timer32_enableInterrupt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer32.o(i.Timer32_enableInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer32_init
</UL>

<P><STRONG><a name="[d9]"></a>Timer32_getValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer32.o(i.Timer32_getValue))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Period
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;US100_IRQHandler
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPM_IRQHandler
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY53L1X_In2_IRQHandler
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY53L1X_In1_IRQHandler
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Systime
</UL>

<P><STRONG><a name="[b9]"></a>Timer32_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, license.o(i.Timer32_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Timer32_init &rArr; Timer32_initModule
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt_enableInterrupt
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer32_startTimer
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer32_setCount
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer32_initModule
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer32_enableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_HardWave_Init
</UL>

<P><STRONG><a name="[198]"></a>Timer32_initModule</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, timer32.o(i.Timer32_initModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Timer32_initModule
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer32_init
</UL>

<P><STRONG><a name="[18d]"></a>Timer32_setCount</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, timer32.o(i.Timer32_setCount))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer32_init
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T32_INT2_IRQHandler
</UL>

<P><STRONG><a name="[19b]"></a>Timer32_startTimer</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, timer32.o(i.Timer32_startTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer32_startTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer32_init
</UL>

<P><STRONG><a name="[78]"></a>Top_APrilTag_Control_Pliot</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, opticalflow_control.o(i.Top_APrilTag_Control_Pliot))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Top_APrilTag_Control_Pliot &rArr; OpticalFlow_Control_Pure &rArr; OpticalFlow_Vel_Control &rArr; accel_to_lean_angles &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Control_Pure
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Control_SDK_Err_LPF
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Vel_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Flight_Ctrl
</UL>

<P><STRONG><a name="[e3]"></a>Total_Control</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, wp_ctrl.o(i.Total_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Total_Control &rArr; Main_Leading_Control &rArr; Auto_Flight_Ctrl &rArr; NCQ_SDK_Run &rArr; move_with_z_target &rArr; OpticalFlow_Control_Pure &rArr; OpticalFlow_Vel_Control &rArr; accel_to_lean_angles &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Control_Pure
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flight_Alt_Hold_Control
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Leading_Control
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GankerPilot_Control
</UL>

<P><STRONG><a name="[14a]"></a>Total_PID_Init</STRONG> (Thumb, 230 bytes, Stack size 8 bytes, pid.o(i.Total_PID_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Total_PID_Init &rArr; Set_Cutoff_Frequency &rArr; __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Cutoff_Frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Or_Reset_PID_Parameter
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Paramter_Init_With_Flash
</UL>

<P><STRONG><a name="[19d]"></a>US100_DN</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, us_100.o(i.US100_DN))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = US100_DN &rArr; GPIO_interruptEdgeSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setAsInputPinWithPullUpResistor
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_interruptEdgeSelect
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_clearInterruptFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;US100_IRQHandler
</UL>

<P><STRONG><a name="[14d]"></a>US100_IRQHandler</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, us_100.o(i.US100_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = US100_IRQHandler &rArr; US100_DN &rArr; GPIO_interruptEdgeSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer32_getValue
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;US100_DN
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT6_IRQHandler
</UL>

<P><STRONG><a name="[19e]"></a>US100_Trigger_Conversion</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, us_100.o(i.US100_Trigger_Conversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = US100_Trigger_Conversion &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setOutputLowOnPin
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setOutputHighOnPin
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;US100_UP
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;US_100_Statemachine
</UL>

<P><STRONG><a name="[19f]"></a>US100_UP</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, us_100.o(i.US100_UP))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = US100_UP &rArr; GPIO_interruptEdgeSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setAsInputPinWithPullDownResistor
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_interruptEdgeSelect
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_clearInterruptFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;US100_Trigger_Conversion
</UL>

<P><STRONG><a name="[f7]"></a>USART0_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, usart.o(i.USART0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USART0_Init &rArr; OpticalFlow_Init &rArr; Set_Cutoff_Frequency &rArr; __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Init_Uart
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
</UL>

<P><STRONG><a name="[17f]"></a>USART0_Send_Byte</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usart.o(i.USART0_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART0_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorConfig_UartSend
</UL>

<P><STRONG><a name="[f5]"></a>USART1_Init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, usart.o(i.USART1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
</UL>

<P><STRONG><a name="[16c]"></a>USART1_Send</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usart.o(i.USART1_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART1_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DT_Send_Check
</UL>

<P><STRONG><a name="[f6]"></a>USART2_Init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, usart.o(i.USART2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART2_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
</UL>

<P><STRONG><a name="[1d8]"></a>USART2_Send</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usart.o(i.USART2_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART2_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wust_sendware
</UL>

<P><STRONG><a name="[f8]"></a>USART3_Init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, usart.o(i.USART3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART3_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
</UL>

<P><STRONG><a name="[16b]"></a>USART3_Send</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usart.o(i.USART3_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART3_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DT_Send_Check
</UL>

<P><STRONG><a name="[192]"></a>US_100_Statemachine</STRONG> (Thumb, 316 bytes, Stack size 8 bytes, us_100.o(i.US_100_Statemachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = US_100_Statemachine &rArr; US100_Trigger_Conversion &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;US100_Trigger_Conversion
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_400hz_Thread
</UL>

<P><STRONG><a name="[a0]"></a>Value_Limit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wp_ctrl.o(i.Value_Limit))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_Output
</UL>

<P><STRONG><a name="[194]"></a>Vcan_Send</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, usart.o(i.Vcan_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Vcan_Send &rArr; wust_sendware &rArr; USART2_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wust_sendware
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_400hz_Thread
</UL>

<P><STRONG><a name="[172]"></a>Vector_From_BodyFrame2EarthFrame</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, sins.o(i.Vector_From_BodyFrame2EarthFrame))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SINS_Prepare
</UL>

<P><STRONG><a name="[105]"></a>WP_Quad_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, sensor.o(i.WP_Quad_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = WP_Quad_Init &rArr; Quaternion_Init &rArr; Euler_Angle_Init &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
</UL>

<P><STRONG><a name="[b4]"></a>WriteFlashParameter</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, wp_flash.o(i.WriteFlashParameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = WriteFlashParameter &rArr; EEPROM_Write_N_Data &rArr; AT24CXX_Write_Data &rArr; AT24CXX_Write &rArr; AT24CXX_WriteOneByte &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write_N_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Other_Parameter_Default
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Horizontal_Calibration_Check
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_Calibration_Check
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_HardWave_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Data_Prase_Process
</UL>

<P><STRONG><a name="[66]"></a>WriteFlashParameter_Three</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, wp_flash.o(i.WriteFlashParameter_Three))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = WriteFlashParameter_Three &rArr; EEPROM_Write_N_Data &rArr; AT24CXX_Write_Data &rArr; AT24CXX_Write &rArr; AT24CXX_WriteOneByte &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write_N_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Calibration_Check
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Calibartion_LS
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Calibartion
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_PID_Parameter
</UL>

<P><STRONG><a name="[158]"></a>WriteFlashParameter_Two</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, wp_flash.o(i.WriteFlashParameter_Two))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = WriteFlashParameter_Two &rArr; EEPROM_Write_N_Data &rArr; AT24CXX_Write_Data &rArr; AT24CXX_Write &rArr; AT24CXX_WriteOneByte &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write_N_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Calibration_Check
</UL>

<P><STRONG><a name="[f2]"></a>Yaw_Fault_Check</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, wp_ctrl.o(i.Yaw_Fault_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Yaw_Fault_Check
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Integrate_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Control
</UL>

<P><STRONG><a name="[18a]"></a>_SysTick_Config</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, license.o(i._SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[1b5]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[1af]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
</UL>

<P><STRONG><a name="[c5]"></a>__hardfp_cos</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, cos.o(i.__hardfp_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Angle_Init_Again
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Angle_Init
</UL>

<P><STRONG><a name="[185]"></a>__hardfp_cosf</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, cosf.o(i.__hardfp_cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Cutoff_Frequency
</UL>

<P><STRONG><a name="[c3]"></a>__hardfp_sin</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, sin.o(i.__hardfp_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Angle_Init_Again
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Angle_Init
</UL>

<P><STRONG><a name="[125]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LS_Calculate
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick_AHRS_Update_IMU
</UL>

<P><STRONG><a name="[1ae]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pythagorous2
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pythagorous3
</UL>

<P><STRONG><a name="[184]"></a>__hardfp_tanf</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, tanf.o(i.__hardfp_tanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Cutoff_Frequency
</UL>

<P><STRONG><a name="[1a6]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 938 bytes, Stack size 120 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[1a8]"></a>__kernel_cos</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[1b4]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[1a7]"></a>__kernel_sin</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[1a5]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[1a4]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[1b6]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[1ac]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[1ab]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[1b0]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
</UL>

<P><STRONG><a name="[1aa]"></a>__mathlib_rredf2</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[147]"></a>accel_to_lean_angles</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, control_poshold.o(i.accel_to_lean_angles))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = accel_to_lean_angles &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Vel_Control
</UL>

<P><STRONG><a name="[1b7]"></a>auto_altland</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, namelesscotrun_sdk.o(i.auto_altland))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = auto_altland &rArr; land_althold &rArr; PID_Control &rArr; Test_Period
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;land_althold
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_with_z_target
</UL>

<P><STRONG><a name="[d3]"></a>constrain_float</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, wp_math.o(i.constrain_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flight_Alt_Hold_Control
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Control_Div_LPF_For_Gyro
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Expect_Speed_Mapping
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Vel_Control
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Pos_Control
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_to_lean_angles
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;land_althold
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Rotate_Complementary_Filter
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_CF
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature_Ctrl
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Throttle_Angle_Compensate
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick_AHRS_Update_IMU
</UL>

<P><STRONG><a name="[164]"></a>constrain_int16_t</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rc.o(i.constrain_int16_t))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Control
</UL>

<P><STRONG><a name="[ab]"></a>delay</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, time.o(i.delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = delay
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Ms
</UL>

<P><STRONG><a name="[1ba]"></a>delayMicroseconds</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, time.o(i.delayMicroseconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[5b]"></a>delay_ms</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, time.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_ms &rArr; Delay_Ms &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Ms
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Calibration_Trigger
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Horizontal_Calibration_Check
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_I2C
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_MPU6050
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Calibration
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Init_Uart
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Angle_Init
</UL>

<P><STRONG><a name="[176]"></a>delay_us</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, time.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMicroseconds
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_delay
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;US100_Trigger_Conversion
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Delay
</UL>

<P><STRONG><a name="[1bc]"></a>draw_oled</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ssd1306.o(i.draw_oled))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = draw_oled &rArr; LCD_Set_Pos &rArr; LCD_WrCmd &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WrDat
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Pos
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_display
</UL>

<P><STRONG><a name="[1b1]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[c1]"></a>fast_atan</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, wp_math.o(i.fast_atan))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Angle_Init_Again
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Parameter_Sort
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_to_lean_angles
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Observation_Angle_Calculate
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Angle_Init
</UL>

<P><STRONG><a name="[136]"></a>find_black</STRONG> (Thumb, 308 bytes, Stack size 16 bytes, my_task.o(i.find_black))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = find_black &rArr; Color_Block_Control_Pliot &rArr; OpticalFlow_Control_Pure &rArr; OpticalFlow_Vel_Control &rArr; accel_to_lean_angles &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pythagorous2
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Control_Pure
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flight_Alt_Hold_Control
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color_Block_Control_Pliot
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCQ_SDK_Run
</UL>

<P><STRONG><a name="[ec]"></a>imuComputeRotationMatrix</STRONG> (Thumb, 496 bytes, Stack size 8 bytes, sensor.o(i.imuComputeRotationMatrix))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = imuComputeRotationMatrix
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastSin
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastCos
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Status_Feedback
</UL>

<P><STRONG><a name="[c0]"></a>invSqrt</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, sensor.o(i.invSqrt))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Angle_Init_Again
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Observation_Angle_Calculate
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick_AHRS_Update_IMU
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Angle_Init
</UL>

<P><STRONG><a name="[11e]"></a>key_delay</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, key.o(i.key_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = key_delay &rArr; delay_us &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan
</UL>

<P><STRONG><a name="[1b8]"></a>land_althold</STRONG> (Thumb, 416 bytes, Stack size 24 bytes, control_land.o(i.land_althold))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = land_althold &rArr; PID_Control &rArr; Test_Period
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Control
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thr_Scale_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_with_z_target
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_altland
</UL>

<P><STRONG><a name="[1c0]"></a>land_nogps_run</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, control_land.o(i.land_nogps_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = land_nogps_run &rArr; Flight_Alt_Hold_Control &rArr; PID_Control_Div_LPF &rArr; Test_Period
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flight_Alt_Hold_Control
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Off_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;land_run
</UL>

<P><STRONG><a name="[a5]"></a>land_reset</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, control_land.o(i.land_reset))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controler_Mode_Select
</UL>

<P><STRONG><a name="[12f]"></a>land_run</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, control_land.o(i.land_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = land_run &rArr; land_nogps_run &rArr; Flight_Alt_Hold_Control &rArr; PID_Control_Div_LPF &rArr; Test_Period
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;land_nogps_run
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Leading_Control
</UL>

<P><STRONG><a name="[9c]"></a>landon_earth_check</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, control_land.o(i.landon_earth_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = landon_earth_check &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_Output
</UL>

<P><STRONG><a name="[43]"></a>main</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = main &rArr; Mag_Calibartion_LS &rArr; LS_Calculate &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Or_Reset_PID_Parameter
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_OPENMV_Config
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Calibration_Check
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Calibartion_LS
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Calibartion
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1bb]"></a>micros</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, time.o(i.micros))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMicroseconds
</UL>

<P><STRONG><a name="[160]"></a>millis</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, time.o(i.millis))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Button_State_One
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>

<P><STRONG><a name="[135]"></a>move_with_xy_target</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, namelesscotrun_sdk.o(i.move_with_xy_target))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = move_with_xy_target &rArr; OpticalFlow_Control_Pure &rArr; OpticalFlow_Vel_Control &rArr; accel_to_lean_angles &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pythagorous2
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Control_Pure
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flight_Alt_Hold_Control
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Vel_Control
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Pos_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCQ_SDK_Run
</UL>

<P><STRONG><a name="[134]"></a>move_with_z_target</STRONG> (Thumb, 590 bytes, Stack size 48 bytes, namelesscotrun_sdk.o(i.move_with_z_target))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = move_with_z_target &rArr; OpticalFlow_Control_Pure &rArr; OpticalFlow_Vel_Control &rArr; accel_to_lean_angles &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Control_Pure
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flight_Alt_Hold_Control
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Period
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_altland
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;land_althold
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCQ_SDK_Run
</UL>

<P><STRONG><a name="[ad]"></a>nc_iic_read_len</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, myiic.o(i.nc_iic_read_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nc_iic_read_len &rArr; send_ch &rArr; WaitAck &rArr; GPIO_getInputPinValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ch
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ch
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_stop
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_start
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nbyte_ReadI2C
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Double_ReadI2C
</UL>

<P><STRONG><a name="[186]"></a>nc_iic_read_reg</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, myiic.o(i.nc_iic_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nc_iic_read_reg &rArr; send_ch &rArr; WaitAck &rArr; GPIO_getInputPinValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ch
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ch
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_stop
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_start
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Single_ReadI2C
</UL>

<P><STRONG><a name="[187]"></a>nc_iic_write_reg</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, myiic.o(i.nc_iic_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nc_iic_write_reg &rArr; send_ch &rArr; WaitAck &rArr; GPIO_getInputPinValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ch
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_stop
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_start
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Single_WriteI2C
</UL>

<P><STRONG><a name="[142]"></a>pythagorous2</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, wp_math.o(i.pythagorous2))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pythagorous2 &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sq
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_black
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Control
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_with_xy_target
</UL>

<P><STRONG><a name="[182]"></a>pythagorous3</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, wp_math.o(i.pythagorous3))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pythagorous3 &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sq
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Update
</UL>

<P><STRONG><a name="[1c2]"></a>read_ch</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, myiic.o(i.read_ch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = read_ch &rArr; I2C_SendACK &rArr; SDA_IOOUT
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setOutputLowOnPin
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setOutputHighOnPin
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_getInputPinValue
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IOOUT
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IOIN
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nc_iic_delay
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendACK
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nc_iic_read_reg
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nc_iic_read_len
</UL>

<P><STRONG><a name="[10a]"></a>safe_sqrt</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, wp_math.o(i.safe_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = safe_sqrt &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Horizontal_Calibration_Check
</UL>

<P><STRONG><a name="[1c1]"></a>send_ch</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, myiic.o(i.send_ch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = send_ch &rArr; WaitAck &rArr; GPIO_getInputPinValue
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setOutputLowOnPin
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setOutputHighOnPin
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nc_iic_delay
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitAck
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nc_iic_write_reg
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nc_iic_read_reg
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nc_iic_read_len
</UL>

<P><STRONG><a name="[1c4]"></a>spl0601_get_calib_param</STRONG> (Thumb, 476 bytes, Stack size 16 bytes, spl06.o(i.spl0601_get_calib_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = spl0601_get_calib_param &rArr; spl0601_read &rArr; Single_ReadI2C &rArr; nc_iic_read_reg &rArr; send_ch &rArr; WaitAck &rArr; GPIO_getInputPinValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_read
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_init
</UL>

<P><STRONG><a name="[1d7]"></a>spl0601_get_pressure</STRONG> (Thumb, 214 bytes, Stack size 0 bytes, spl06.o(i.spl0601_get_pressure))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_spl0601_get
</UL>

<P><STRONG><a name="[1c6]"></a>spl0601_get_raw_pressure</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, spl06.o(i.spl0601_get_raw_pressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = spl0601_get_raw_pressure &rArr; spl0601_read &rArr; Single_ReadI2C &rArr; nc_iic_read_reg &rArr; send_ch &rArr; WaitAck &rArr; GPIO_getInputPinValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_read
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_spl0601_get
</UL>

<P><STRONG><a name="[1c7]"></a>spl0601_get_raw_temp</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, spl06.o(i.spl0601_get_raw_temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = spl0601_get_raw_temp &rArr; spl0601_read &rArr; Single_ReadI2C &rArr; nc_iic_read_reg &rArr; send_ch &rArr; WaitAck &rArr; GPIO_getInputPinValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_read
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_spl0601_get
</UL>

<P><STRONG><a name="[1c8]"></a>spl0601_get_temperature</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, spl06.o(i.spl0601_get_temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = spl0601_get_temperature &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_spl0601_get
</UL>

<P><STRONG><a name="[18b]"></a>spl0601_init</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, spl06.o(i.spl0601_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = spl0601_init &rArr; spl0601_get_calib_param &rArr; spl0601_read &rArr; Single_ReadI2C &rArr; nc_iic_read_reg &rArr; send_ch &rArr; WaitAck &rArr; GPIO_getInputPinValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_calib_param
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[179]"></a>spl0601_rateset</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, spl06.o(i.spl0601_rateset))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = spl0601_rateset &rArr; spl0601_write &rArr; Single_WriteI2C &rArr; nc_iic_write_reg &rArr; send_ch &rArr; WaitAck &rArr; GPIO_getInputPinValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_write
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_read
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPL06_Init
</UL>

<P><STRONG><a name="[1c5]"></a>spl0601_read</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, spl06.o(i.spl0601_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = spl0601_read &rArr; Single_ReadI2C &rArr; nc_iic_read_reg &rArr; send_ch &rArr; WaitAck &rArr; GPIO_getInputPinValue
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Single_ReadI2C
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_rateset
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_raw_temp
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_raw_pressure
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_calib_param
</UL>

<P><STRONG><a name="[17a]"></a>spl0601_start_continuous</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, spl06.o(i.spl0601_start_continuous))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = spl0601_start_continuous &rArr; spl0601_write &rArr; Single_WriteI2C &rArr; nc_iic_write_reg &rArr; send_ch &rArr; WaitAck &rArr; GPIO_getInputPinValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_write
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPL06_Init
</UL>

<P><STRONG><a name="[1c9]"></a>spl0601_write</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, spl06.o(i.spl0601_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = spl0601_write &rArr; Single_WriteI2C &rArr; nc_iic_write_reg &rArr; send_ch &rArr; WaitAck &rArr; GPIO_getInputPinValue
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Single_WriteI2C
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_start_continuous
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_rateset
</UL>

<P><STRONG><a name="[1c3]"></a>sq</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wp_math.o(i.sq))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pythagorous2
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pythagorous3
</UL>

<P><STRONG><a name="[139]"></a>ssd1306_begin</STRONG> (Thumb, 294 bytes, Stack size 8 bytes, ssd1306.o(i.ssd1306_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ssd1306_begin &rArr; ssd1306_command &rArr; LCD_WrCmd &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_command
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init_Fast
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[151]"></a>ssd1306_clear_display</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssd1306.o(i.ssd1306_clear_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ssd1306_clear_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
</UL>

<P><STRONG><a name="[1ca]"></a>ssd1306_command</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ssd1306.o(i.ssd1306_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ssd1306_command &rArr; LCD_WrCmd &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WrCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_begin
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_display
</UL>

<P><STRONG><a name="[155]"></a>ssd1306_display</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ssd1306.o(i.ssd1306_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ssd1306_display &rArr; draw_oled &rArr; LCD_Set_Pos &rArr; LCD_WrCmd &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_command
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_oled
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
</UL>

<P><STRONG><a name="[153]"></a>ssd1306_draw_circle</STRONG> (Thumb, 260 bytes, Stack size 52 bytes, ssd1306.o(i.ssd1306_draw_circle))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ssd1306_draw_circle &rArr; ssd1306_draw_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
</UL>

<P><STRONG><a name="[1ce]"></a>ssd1306_draw_fast_hline_internal</STRONG> (Thumb, 174 bytes, Stack size 20 bytes, ssd1306.o(i.ssd1306_draw_fast_hline_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ssd1306_draw_fast_hline_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_fast_vline
</UL>

<P><STRONG><a name="[1cd]"></a>ssd1306_draw_fast_vline</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, ssd1306.o(i.ssd1306_draw_fast_vline))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ssd1306_draw_fast_vline &rArr; ssd1306_draw_fast_vline_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_fast_vline_internal
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_fast_hline_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_fill_circle
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_fill_circle_helper
</UL>

<P><STRONG><a name="[1cf]"></a>ssd1306_draw_fast_vline_internal</STRONG> (Thumb, 378 bytes, Stack size 28 bytes, ssd1306.o(i.ssd1306_draw_fast_vline_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ssd1306_draw_fast_vline_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_fast_vline
</UL>

<P><STRONG><a name="[152]"></a>ssd1306_draw_line</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, ssd1306.o(i.ssd1306_draw_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ssd1306_draw_line &rArr; ssd1306_draw_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
</UL>

<P><STRONG><a name="[1cc]"></a>ssd1306_draw_pixel</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, ssd1306.o(i.ssd1306_draw_pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssd1306_draw_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_width
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_height
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_line
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_circle
</UL>

<P><STRONG><a name="[154]"></a>ssd1306_fill_circle</STRONG> (Thumb, 48 bytes, Stack size 28 bytes, ssd1306.o(i.ssd1306_fill_circle))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ssd1306_fill_circle &rArr; ssd1306_fill_circle_helper &rArr; ssd1306_draw_fast_vline &rArr; ssd1306_draw_fast_vline_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_fill_circle_helper
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_fast_vline
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
</UL>

<P><STRONG><a name="[1d2]"></a>ssd1306_fill_circle_helper</STRONG> (Thumb, 198 bytes, Stack size 44 bytes, ssd1306.o(i.ssd1306_fill_circle_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ssd1306_fill_circle_helper &rArr; ssd1306_draw_fast_vline &rArr; ssd1306_draw_fast_vline_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_fast_vline
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_fill_circle
</UL>

<P><STRONG><a name="[1d1]"></a>ssd1306_height</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssd1306.o(i.ssd1306_height))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_pixel
</UL>

<P><STRONG><a name="[1d0]"></a>ssd1306_width</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssd1306.o(i.ssd1306_width))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_pixel
</UL>

<P><STRONG><a name="[189]"></a>sys_init</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, license.o(i.sys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sys_init &rArr; CS_getSMCLK &rArr; _CSComputeCLKFrequency &rArr; CS_getDCOFrequency &rArr; SysCtl_getTLVInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_startHFXT
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_setExternalClockSourceFrequency
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_getSMCLK
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_getMCLK
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_getACLK
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt_disableSleepOnIsrExit
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPU_enableModule
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPU_enableLazyStacking
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[17c]"></a>user_spl0601_get</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, spl06.o(i.user_spl0601_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = user_spl0601_get &rArr; spl0601_get_raw_temp &rArr; spl0601_read &rArr; Single_ReadI2C &rArr; nc_iic_read_reg &rArr; send_ch &rArr; WaitAck &rArr; GPIO_getInputPinValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_temperature
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_raw_temp
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_raw_pressure
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_pressure
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPL06_Read_Data
</UL>

<P><STRONG><a name="[a9]"></a>write_6_8_number</STRONG> (Thumb, 696 bytes, Stack size 48 bytes, oled.o(i.write_6_8_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = write_6_8_number &rArr; LCD_P6x8Str &rArr; LCD_Set_Pos &rArr; LCD_WrCmd &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_P6x8Char
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_P6x8Str
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copyright_Show
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_HardWave_Init
</UL>

<P><STRONG><a name="[1a0]"></a>wust_sendware</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, usart.o(i.wust_sendware))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wust_sendware &rArr; USART2_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vcan_Send
</UL>

<P><STRONG><a name="[1a9]"></a>__aeabi_dneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[21f]"></a>_dneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[220]"></a>__aeabi_fneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[221]"></a>_fneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[222]"></a>_dabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[223]"></a>_fabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[c4]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LS_Calculate
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Angle_Init_Again
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Read_Temperature
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_temperature
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Openmv_Data_Receive_Anl_2
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Data_Prase_Process
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick_AHRS_Update_IMU
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Angle_Init
</UL>

<P><STRONG><a name="[1d9]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[ca]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Angle_Init_Again
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Read_Temperature
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_temperature
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_Init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>

<P><STRONG><a name="[1dc]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[1e2]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[129]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Read_Temperature
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Openmv_Data_Receive_Anl_2
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
</UL>

<P><STRONG><a name="[1df]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1b2]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[1e0]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Calibration_Check
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Horizontal_Calibration_Check
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_Calibration_Check
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Calibration_Check
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Read_Temperature
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_temperature
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Control
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Data_Prase_Process
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[224]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[13d]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Control
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Openmv_Data_Receive_Anl_2
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;landon_earth_check
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[225]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[6c]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Calibration_Check
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Horizontal_Calibration_Check
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_Calibration_Check
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Calibration_Check
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Control
</UL>

<P><STRONG><a name="[1e1]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[1e5]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[c9]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Angle_Init_Again
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_temperature
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Openmv_Data_Receive_Anl_2
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Data_Prase_Process
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_Init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[1e3]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1db]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[1de]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Calibration_Check
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Horizontal_Calibration_Check
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_Calibration_Check
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Calibration_Check
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Control
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;landon_earth_check
</UL>

<P><STRONG><a name="[1e4]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[1b3]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[1e6]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[1ad]"></a>_dsqrt</STRONG> (Thumb, 404 bytes, Stack size 24 bytes, dsqrt_umaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[cb]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Angle_Init_Again
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Read_Temperature
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Openmv_Data_Receive_Anl_2
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[1e8]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[c2]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LS_Calculate
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Angle_Init_Again
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_temperature
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Openmv_Data_Receive_Anl_2
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick_AHRS_Update_IMU
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Angle_Init
</UL>

<P><STRONG><a name="[1e9]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[1ea]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[3d]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[226]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[227]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1da]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[81]"></a>_CSComputeCLKFrequency</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, cs.o(i._CSComputeCLKFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _CSComputeCLKFrequency &rArr; CS_getDCOFrequency &rArr; SysCtl_getTLVInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_getDCOFrequency
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_clearInterruptFlag
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CSGetDividerValue
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_getSMCLK
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_getMCLK
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_getACLK
</UL>

<P><STRONG><a name="[84]"></a>_CSGetDOCFrequency</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, cs.o(i._CSGetDOCFrequency))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_getDCOFrequency
</UL>

<P><STRONG><a name="[1a2]"></a>_CSGetDividerValue</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, cs.o(i._CSGetDividerValue))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CSComputeCLKFrequency
</UL>

<P><STRONG><a name="[8b]"></a>_CSGetHFXTFrequency</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, cs.o(i._CSGetHFXTFrequency))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_startHFXTWithTimeout
</UL>

<P><STRONG><a name="[148]"></a>__ARM_isnanf</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, calibration.o(i.__ARM_isnanf))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Other_Parameter_Init
</UL>

<P><STRONG><a name="[123]"></a>__ARM_isnanf</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, filter.o(i.__ARM_isnanf))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPButterworth
</UL>

<P><STRONG><a name="[114]"></a>__ARM_isnanf</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mpu6050.o(i.__ARM_isnanf))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Calibration
</UL>

<P><STRONG><a name="[10c]"></a>I2C_SendACK</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, myiic.o(i.I2C_SendACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_SendACK &rArr; SDA_IOOUT
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setOutputLowOnPin
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setOutputHighOnPin
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IOOUT
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nc_iic_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ch
</UL>

<P><STRONG><a name="[1a1]"></a>WaitAck</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, myiic.o(i.WaitAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WaitAck &rArr; GPIO_getInputPinValue
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setOutputLowOnPin
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setOutputHighOnPin
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_getInputPinValue
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IOOUT
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IOIN
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nc_iic_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ch
</UL>

<P><STRONG><a name="[10e]"></a>nc_iic_delay</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, myiic.o(i.nc_iic_delay))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ch
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ch
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_stop
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_start
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitAck
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendACK
</UL>

<P><STRONG><a name="[15d]"></a>__ARM_isnanf</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wp_flash.o(i.__ARM_isnanf))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashParameterTwo
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashParameterThree
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashParameterOne
</UL>

<P><STRONG><a name="[1b9]"></a>__ARM_isnanf</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wp_math.o(i.__ARM_isnanf))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float
</UL>

<P><STRONG><a name="[99]"></a>SensorConfig_UartSend</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, opticalflow_lc306.o(i.SensorConfig_UartSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SensorConfig_UartSend &rArr; USART0_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Init_Uart
</UL>

<P><STRONG><a name="[170]"></a>__ARM_isnanf</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, namelesscotrun_sdk.o(i.__ARM_isnanf))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_Init
</UL>

<P><STRONG><a name="[e6]"></a>__ARM_isnanf</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sensor.o(i.__ARM_isnanf))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick_AHRS_Update_IMU
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Baro_Offset
</UL>

<P><STRONG><a name="[1e7]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[1dd]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
